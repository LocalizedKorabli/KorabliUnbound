(def constant SoundEvent "{
	OVER: 'over',
	OUT: 'out',
	PRESS: 'press',
	CLICK: 'click',
	CHANGE: 'change'
}")











(def macro MOUSE_HANDLER_SCOPE (_prefix:expression="''")
	(event name="_prefix + 'evClicked'")								

	(event name="_prefix + 'evRollOver'")
	(event name="_prefix + 'evRollOut'")
	(event name="_prefix + 'evMouseDown'")
	(event name="_prefix + 'evStageMouseUp'")

	(var name="_prefix + 'rollOver'" type=bool value="$event.isOver" init=false watch=false (event "$scope[_prefix + 'evRollOver']") (event "$scope[_prefix + 'evRollOut']"))
	(var name="_prefix + 'mouseDown'" type=bool value="$event.isDown" init=false watch=false (event "$scope[_prefix + 'evMouseDown']") (event "$scope[_prefix + 'evStageMouseUp']"))
)










(def macro MOUSE_EVENTS_DISPATCHER (_prefix:expression="''")
	(dispatch "_prefix + 'evClicked'" on='leftClick')					

	(dispatch "_prefix + 'evRollOver'"		args="{ isOver: true }"		on='rollOver')
	(dispatch "_prefix + 'evRollOut'"		args="{ isOver: false }"	on='rollOut')
	(dispatch "_prefix + 'evMouseDown'"		args="{ isDown: true }"		on='leftMouseDown')
	(dispatch "_prefix + 'evStageMouseUp'"	args="{ isDown: false }"	on='stageMouseUp')
)

(def macro MOUSE_HANDLER (_enabled:expression=true, _prefix:expression="''", _dispatchedEv:expression='', _dispatchParams:expression={}, _methods:expression=[], _soundSet:expression='')
	(block
		(bind visible "_enabled")
		(class $FullsizeAbsolute)
		(style (backgroundColor = "NO_COLOR"))

		(macro MOUSE_EVENTS_DISPATCHER "_prefix")
		(macro SOUND_HANDLER "_soundSet" "_prefix")
		(macro CLICK_HANDLER
			_prefix = "_prefix"
			_dispatchedEv = "_dispatchedEv"
			_dispatchParams = "_dispatchParams"
			_methods = "_methods"
		)
	)
)

(def macro SOUND_HANDLER (_soundSet:expression='', _prefix:expression='')
	(bindcall externalCall 'sound.playSetSoundDirect' "[_soundSet, SoundEvent.OVER]"	watch=false (event "$scope[_prefix + 'evRollOver']"))
	(bindcall externalCall 'sound.playSetSoundDirect' "[_soundSet, SoundEvent.OUT]"		watch=false (event "$scope[_prefix + 'evRollOut']"))
	(bindcall externalCall 'sound.playSetSoundDirect' "[_soundSet, SoundEvent.PRESS]"	watch=false (event "$scope[_prefix + 'evMouseDown']"))
	(bindcall externalCall 'sound.playSetSoundDirect' "[_soundSet, SoundEvent.CLICK]"	watch=false (event "$scope[_prefix + 'evClicked']"))
)

(def macro DISPATCH_HANDLER (_prefix:expression='', _dispatchedEv:expression='', _dispatchParams:expression={})
	(dispatch "_dispatchedEv" args="_dispatchParams" dir="EventDirection.UP" (event "$scope[_prefix + 'evClicked']"))
)

(def macro CLICK_HANDLER (_prefix:expression='', _dispatchedEv:expression='', _dispatchParams:expression={}, _methods:expression=null)
	(dispatch "_dispatchedEv" args="_dispatchParams" dir="EventDirection.UP" (event "$scope[_prefix + 'evClicked']"))
	(macro MOUSE_LMB_EXTERNAL_CALL_REPEAT "_methods" "_prefix")
)

(def macro MOUSE_LMB_EXTERNAL_CALL (externalMethod:str, methodArgs:expression, enabled:expression = "true")
	(bindcall externalCall "enabled ? externalMethod : ''" "methodArgs" watch=false on='leftClick')
)

(def macro MOUSE_LMB_EXTERNAL_CALL_REPEAT (_methods:expression, _prefix:expression = "''")
	(controller $Repeat
		(bind enabled "_methods")
		(bind count "_methods.length")
		(exprs
			(bindcall externalCall "_methods[$index].type" "[_methods[$index].name, _methods[$index].args]" watch=false (event "$scope[_prefix + 'evClicked']"))
		)
	)
)