(def constant CT_SLIDER_OVER "{ redMultiplier: 1,	greenMultiplier: 1,	blueMultiplier: 1,	alphaMultiplier: 1,
								redOffset: 15,		greenOffset: 15,	blueOffset: 15,		alphaOffset: 0 }")

(def constant CT_SLIDER_DOWN "{ redMultiplier: 1,	greenMultiplier: 1,	blueMultiplier: 1,	alphaMultiplier: 1,
								redOffset: -20,		greenOffset: -20,	blueOffset: -20,	alphaOffset: 0 }")

(def element DefaultSlider (_value:number, _intervalsCount:number, _width:number=200)
	(scope
		(event evSliderThumbMouseDown)

		(event evSliderValueChangedInternal)
		(var curValue:number = "_value")
		(bind curValue "$event.newValue" init=false watch=false (event "evSliderValueChangedInternal"))

		(var rollOver:bool = "false")
		(bind rollOver "false"	init=false watch=false on='rollOut')
		(bind rollOver "true"	init=false watch=false on='rollOver')

		(var mouseDown:bool = "false")
		(bind mouseDown "false"	init=false watch=false on='stageMouseUp')
		(bind mouseDown "true"	init=false watch=false on='leftMouseDown' (event "evSliderThumbMouseDown"))
	)
	(dispatch 'evSliderValueChanged' args="{ value: $event.newValue }" dir="EventDirection.UP" (event "evSliderValueChangedInternal"))

	(bindcall externalCall 'sound.playSetSoundDirect' "['slider', SoundEvent.OVER]"		on='rollOver')
	(bindcall externalCall 'sound.playSetSoundDirect' "['slider', SoundEvent.PRESS]"	on='leftMouseDown')
	(bindcall externalCall 'sound.playSetSoundDirect' "['slider', SoundEvent.CHANGE]"	(event "evSliderValueChangedInternal"))

	(style (width = "_width"))
	(bind colorTransform "	rollOver && !mouseDown	? CT_SLIDER_OVER :
							mouseDown				? CT_SLIDER_DOWN
													: CT_NONE")

	(scroll_bar
		(style (width = 100%))

		(bind maximum "_intervalsCount")
		(bind value "curValue")

		(singleStep = 1)
		(scrollDuration = 2)

		(orientation = "horizontal")
		(alignThumbToBorders = false)

		(thumb DefaultSliderThumb)

		(track DefaultSliderTrack
			_value = "curValue"
			_intervalsCount = "_intervalsCount"
		)

		(dispatch evSliderValueChangedInternal args="$event" dir="EventDirection.NONE" on='valueChanged' (bind enabled "mouseDown"))
	)
)

(def element DefaultSliderThumb ()
	(scope
		(var mouseDown:bool = "false")
		(bind mouseDown "false" init=false watch=false on='stageMouseUp')
		(bind mouseDown "true" init=false watch=false on='leftMouseDown')
	)
	(bindcall externalCall 'sound.playSetSoundDirect' "['slider', SoundEvent.PRESS]" on='leftMouseDown')
	(dispatch 'evSliderThumbMouseDown'	dir="EventDirection.UP" (bind enabled "mouseDown")	(bind trigger "mouseDown"))
	(dispatch 'evSliderThumbMouseUp'	dir="EventDirection.UP" (bind enabled "!mouseDown")	(bind trigger "mouseDown"))

	(style
		(marginTop = -6px)
		(width = 10px)
		(height = 22px)
		(backgroundImage = 'url:../service_kit/slider/slider_thumb.png')
	)
)

(def element DefaultSliderTrack (_value:number, _intervalsCount:number)
	(scope
		(var filledWidth:number = "((_value / _intervalsCount) * 100) ?: 0")
	)
	(style
		(height = 10px)
		(paddingLeft = "XXS")
		(paddingRight = "XXS")
		(width = 100%)
		(backgroundImage = 'url:../service_kit/slider/slider_track.png')
		(scale9grid = "[4, 0, 4, 0]")
	)

	(block
		(style
			(position = "absolute")
			(top = 2px)
			(height = 6px)
			(backgroundColor = 0xFF4CE7A9)
			(bind width "1% * filledWidth")
		)
	)

	
	(block
		(style
			(position = "absolute")
			(top = -6px)
			(width = 100%)
			(height = 22px)
			(backgroundColor = "NO_COLOR")
		)
	)
)
