(def element NavalFlagItem (_navalFlagName:str)
	(scope
		
		(event evClicked)
		(event evRollOver)
		(event evRollOut)
		(event evMouseDown)
		(event evStageMouseUp)

		(var rollOver:bool = "$event.isOver" init=false watch=false (event "evRollOver") (event "evRollOut"))
		(var mouseDown:bool ="$event.isDown" init=false watch=false (event "evMouseDown") (event "evStageMouseUp"))

		(macro PULL_SHIP_ID)

		(var resourceEntity:gfx = "$datahub.getSingleEntity(CC.accountResource)")
		(var operationsAccountLocked:bool = "resourceEntity.accountResource.operationsLocked" (event "resourceEntity.accountResource.evOperationsLockChanged"))

		(var shipEntity:gfx = "$datahub.getPrimaryEntity(CC.ship, playerShipId)")
		(var playerShipComponent:gfx = "shipEntity.ownShip")
		(var currentNavalFlag:str = "shipEntity.ship.currentNavalFlag" (event "shipEntity.ship.evCurrentFlagChanged"))

		(var navalFlagEntity:gfx = "$datahub.getPrimaryEntity(CC.navalFlag, _navalFlagName)")

		(var isLocked:bool =		"playerShipComponent.isLocked"			(event "playerShipComponent.evUpdateLock"))
		(var isInFormation:bool =	"playerShipComponent.isInFormation"		(event "playerShipComponent.evUpdateLock"))
		(var isNeedRepair:bool =	"playerShipComponent.isNeedRepair"		(event "playerShipComponent.evUpdateDockState"))

		(var clickAction:str = "isInFormation || isLocked || isNeedRepair || currentNavalFlag == _navalFlagName	? null
																												: SC.Ui_common.EXTERIOR_ACTIONS.CHANGE_NAVAL_FLAG")
	)
	
	(dispatch evClicked			on='leftClick')
	(dispatch evRollOver		on='rollOver'		args="{isOver: true}")
	(dispatch evRollOut			on='rollOut'		args="{isOver: false}")
	(dispatch evMouseDown		on='mouseDown'		args="{isDown: true}")
	(dispatch evStageMouseUp	on='stageMouseUp'	args="{isDown: false}")

	(bindcall externalCall "clickAction ? 'inputMapping.onAction' : ''" "[clickAction, { shipID: playerShipId, flagName: _navalFlagName }]" init=false watch=false on='leftClick')

	
	(bindcall externalCall 'sound.playSetSoundDirect' "['button_flag', SoundEvent.OVER]" init=false watch=false (event "evRollOver"))
	(bindcall externalCall 'sound.playSetSoundDirect' "['button_flag', SoundEvent.PRESS]" init=false watch=false (event "evMouseDown"))
	(bindcall externalCall 'sound.playSetSoundDirect' "['button_flag', SoundEvent.CLICK]" init=false watch=false (event "evClicked"))

	(class $ExteriorItemPadding)

	(block
		(bind visible "currentNavalFlag == _navalFlagName")

		(class $ExteriorItemSizeWithBorder)
		(style
			(hitTest = false) (position = "absolute")
			(top = "-XXS") (left = "-XXS")
			(backgroundImage = 'url:../service_kit/frames/one_pixel_frame.png')
			(scale9grid = 2)
		)
		(bind colorTransform "COLOR_TRANSFORM_WHITE_TO_YELLOW")
	)

	(block
		(bind colorTransform "	clickAction	? 	mouseDown	? COLOR_TRANSFORM_MOUSE_DOWN :
												rollOver	? COLOR_TRANSFORM_MOUSE_OVER
															: {}
											: 	{}")
		(class $ExteriorItemSize)
		(style (bind backgroundImage "'url:../exteriors/ensigns/naval/' + navalFlagEntity.navalFlag.id + '.png'"))
	)

	(controller $Tooltip
		(renderer = 'NavalFlagTooltip')
		(args _navalFlagName = "_navalFlagName")
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)
)

(def element NavalFlagTooltip (_navalFlagName:str)
	(scope
		(macro PULL_SHIP_ID)

		(var shipEntity:gfx = "$datahub.getPrimaryEntity(CC.ship, playerShipId)")
		(var playerShipComponent:gfx = "shipEntity.ownShip")

		(var isLocked:bool =		"playerShipComponent.isLocked"			(event "playerShipComponent.evUpdateLock"))
		(var isInFormation:bool =	"playerShipComponent.isInFormation"		(event "playerShipComponent.evUpdateLock"))
		(var isNeedRepair:bool =	"playerShipComponent.isNeedRepair"		(event "playerShipComponent.evUpdateDockState"))

		(var installedNavalFlagName:str = "shipEntity.ship.currentNavalFlag" (event "shipEntity.ship.evCurrentFlagChanged"))
		(var isInstalled:bool = "installedNavalFlagName == _navalFlagName")

		(var navalFlagEntity:gfx = "$datahub.getPrimaryEntity(CC.navalFlag, _navalFlagName)")

		(var unifiedStatus:str = "isInstalled	? SC.Ui_styles.UNIFIED_STATUS.CHECK
												: SC.Ui_styles.UNIFIED_STATUS.DEFAULT")

		(var mouseInstruction:dict = "	isInstalled		?	null :
										isInFormation	?	{	_unifiedStatus: SC.Ui_styles.UNIFIED_STATUS.ATTENTION,
																_text: 'IDS_SET_UNREADY_DIVISION_FIRST_TO_OPERATE_EXTERIORS' } :
										isLocked		?	{	_unifiedStatus: SC.Ui_styles.UNIFIED_STATUS.ATTENTION,
																_text: 'IDS_LEAVE_BATTLE_FIRST_TO_OPERATE_EXTERIORS' } :
										isNeedRepair	?	{	_unifiedStatus: SC.Ui_styles.UNIFIED_STATUS.ATTENTION,
																_text: 'IDS_SERVICE_SHIP_TO_OPERATE_EXTERIORS' }
														:	{	_unifiedStatus: SC.Ui_styles.UNIFIED_STATUS.MOUSE_LEFT,
																_text: 'IDS_MOUSE_INSTRUCTION_INSTALL_ENSIGN' }")
	)
	(style (hitTest = false) (width = 320px))
	(macro TOOLTIP_SYSTEM_DEFAULT_BACKGROUND)

	(element TOOLTIP_SYSTEM_DEFAULT_CONTAINER
		(element TooltipSystemHeaderWithIconAndText
			_imageUrl= "'url:../exteriors/ensigns/naval/' + navalFlagEntity.navalFlag.id + '.png'"
			_imageWidth = 60px
			_imageHeight = 60px
			_unifiedStatus = "unifiedStatus"
			_headerText = "'IDS_' + navalFlagEntity.navalFlag.nameIDS"
			_subheaderText = 'IDS_NAVAL_FLAG'
			_headerIconType = "SC.Ui_styles.TOOLTIP_SYSTEM_HEADER_ICON_TYPE.SIMPLE"
		)

		(block
			(style (width = 100%))
			(controller $Instance renderer='TooltipSystemHorizontalDivider' (bind enabled "isInstalled"))
		)

		(block
			(style (width = 100%))
			(controller $Instance renderer='TooltipSystemStatusLine'
				(bind enabled "isInstalled")
				(args
					_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.CHECK"
					_text = 'IDS_INSTALLED'
				)
			)
		)

		(element TooltipSystemHorizontalDivider)

		(block
			(style (width = 100%))
			(controller $Instance renderer='TooltipSystemDescriptionText'
				(args
					_descriptionText = "'IDS_' + navalFlagEntity.navalFlag.nameIDS + '_DESCRIPTION'"
				)
			)
		)

		(block
			(style (width = 100%))
			(controller $Instance renderer='TooltipSystemHorizontalDivider' (bind enabled "mouseInstruction"))
		)

		(block
			(style (width = 100%))
			(controller $Instance renderer='TooltipSystemStatusLine'
				(bind enabled "mouseInstruction")
				(args
					_unifiedStatus = "mouseInstruction._unifiedStatus"
					_text = "mouseInstruction._text"
				)
			)
		)
	)
)
