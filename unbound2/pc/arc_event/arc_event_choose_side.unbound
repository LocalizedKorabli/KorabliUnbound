(def element ModalWindowArcEventChooseSide ()
	(macro MODAL_WINDOW_INIT)
	(scope
		(var arcEventEntity:dhEntity = "getSingleEntity(CC.arcEvent)")
		(var sides:number = "arcEventEntity.arcEventConfig.sidesCount ?: 0")

		(var playerArcEventInfoEntity:dhEntity = "getSingleEntity(CC.playerArcEventInfo)")
		(var chosenSidesMap:dict = "playerArcEventInfoEntity.playerArcEventInfo.chosenSidesMap ?: {}" (event "playerArcEventInfoEntity.playerArcEventInfo.evChosenSidesMapChanged"))
	)
	(style (align = "center"))
	(name = 'ModalWindowArcEventChooseSide')
	(block
		(class $FullsizeAbsolute)
		(style (alpha = 0))
		(controller $Animation
			(bindcall play  duration=0.2
							from = "{ alpha: 0 }"
							to = "{ alpha: 1 }"
							(event "startShow")
			)
			(bindcall play  duration=0.2
							delay=0.2
							from = "{ alpha: 1 }"
							to = "{ alpha: 0 }"
							action="killAll"
							(event "startHide")
			)
		)
		(element AnimatedBackground _selectedCategory="'choose_side'" _type = "SC.Ui_styles.ANIMATED_BG.ARC_EVENT")
	)
	(block
		(macro DEFAULT_MODAL_WINDOW_ANIMATION 1)
		(style (width = 100%))
		(element ModalWindowHeaderFullSize
			_windowName = 'IDS_ARC_EVENT_COMMON_EVENT_TITLE'
			_backButtonText = 'IDS_RETURN_TO_DOCK'
			_paddingRight = "M"
			_paddingLeft = "M"
			_methods = "[	{	type: 'inputMapping.onRequest',
								name: 'goToPort',
								args: {}}]"
		)
	)
	(block 
		(macro DEFAULT_MODAL_WINDOW_ANIMATION 2)
		(style (width = 512px) (marginTop = "{720:L, 1080:XL}"))
		(tf
			(class $TextDefault21NM)
			(style (width = 100%) (textAlign = "center") (alpha = "TC"))
			(text = 'IDS_ARC_EVENT_CHOOSE_SIDE_DESCRIPTION')
		)
	)
	(hblock 
		(macro DEFAULT_MODAL_WINDOW_ANIMATION 0)
		(style (marginTop = "{720:L, 1080:XL}"))
		(controller $Repeat renderer='ArcEventSideSelectionCard'
			(bind count "sides")
			(args _chosenSidesMap = "chosenSidesMap")
		)
	)
	(block 
		(macro DEFAULT_MODAL_WINDOW_ANIMATION 3)
		(style (marginTop = "{720:L, 1080:XL}"))
		(element DefaultButton
			_width = 154px
			_label = 'IDS_ARC_EVENT_CHOOSE_SIDE_RULES_LINK_TEXT'
			_type = "SC.Ui_styles.BUTTON_TYPE.SECONDARY"
			_enabled = true
			_defaultFocused = true
			_focusIndex = 1
			_methods = "[	{	type: 'inputMapping.onRequest',
								name: 'arcEventShowLore',
								args: { }}]"
		)
	)
)

(def element ArcEventSideSelectionCard (_chosenSidesMap:dict = {})
	(scope
		(event evEnableHitTest)
		(macro STAGE_SIZE)
		(macro MOUSE_HANDLER_SCOPE)

		(var playerProgressEntity:dhEntity = "getPrimaryEntity(CC.progressWithRewards, 'personal' + $index)")
		(var mostValuablePersonalRewardIndex:number = "playerProgressEntity.progressWithRewards.mainRewardIndex ?: 0" (event "playerProgressEntity.progressWithRewards.evChanged"))
		(var mostValuablePersonalRewards:array = "playerProgressEntity.progressWithRewards.rewards[mostValuablePersonalRewardIndex] ?: []" (event "playerProgressEntity.progressWithRewards.evChanged"))

		(var isLoaded:bool = false)
		(bind isLoaded "true" init=false on='evEnableHitTest')

		(var isSmallResolution:bool = "stageWidth < 1440")
		(var cardWidth:number = "isSmallResolution ? 296 : 344")
		(var cardHeight:number = "isSmallResolution ? 448 : 512")
		(var iconSize:number = "isSmallResolution ? SC.Ui_styles.SIZE.MEDIUM : SC.Ui_styles.SIZE.LARGE")
		(var description:str = "tr('IDS_ARC_EVENT_COMMON_SIDE_DESCRIPTION_' + $index)")
		(var ctRollOver:dict = "{	redMultiplier: 1, greenMultiplier: 1, blueMultiplier: 1, alphaMultiplier: 1,
									redOffset: 30, greenOffset: 30, blueOffset: 30, alphaOffset: 0}")
		(var ctDown:dict = "{	redMultiplier: 1, greenMultiplier: 1, blueMultiplier: 1, alphaMultiplier: 1,
								redOffset: -30, greenOffset: -30, blueOffset: -30, alphaOffset: 0}")
		(var sideId:number = "$index")
	)
	(name = "'arcEventSideSelectionCard_' + $index")
	(style
		(align = "middle|center") (alpha = 0)
		(bind width "cardWidth") (bind height "cardHeight")
		(bind marginLeft "$index ? {1280:M, 1920:MS} : 0")
		(bind hitTest "isLoaded")
	)
	(bind colorTransform "mouseDown ? ctDown : rollOver ? ctRollOver : {}")
	(controller $Animation
		(bindcall play
			delay		= "0.3 + 0.1*$index"
			duration	= 0.15
			from		= "{ alpha: 0, top: 10 }"
			to			= "{ alpha: 1, top: 0 }"
			on = 'addedToStage'
		)
		(dispatch evEnableHitTest args="{}" init=false on=evAnimEnded)
	)

	(block
		(class $FullsizeAbsolute)
		(element BlurBackgroundCommon 'mc_blurmap_medium')
	)
	(element ArcEventSideStereotype
		_sideId = "$index"
		_size = "iconSize"
		_isChooseSideMW = true
	)
	(block
		(style (width = 256px) (marginTop = "M") (marginBottom = "L"))
		(tf
			(class $TextDefaultNM)
			(style (width = 100%) (leading = -3) (textAlign = "center") (alpha = "TS"))
			(bind text "description")
		)
	)
	(hblock
		(style (gap = "XS"))
		(controller $Repeat renderer='RewardItemAdapter'
			(bind count "mostValuablePersonalRewards.length")
			(args
				_entityId = "mostValuablePersonalRewards[$index]"
				_iconMargin = 0
			)
		)
	)
	(controller $Tooltip
		(renderer = 'ArcEventSideSelectionCardTooltip')
		(args
			_sideId = "$index"
			_chosenSidesMap = "_chosenSidesMap"
			_rewards = "mostValuablePersonalRewards"
		)
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)

	(macro MOUSE_HANDLER
		_methods = "[ {	type: 'inputMapping.onRequest',
						name: 'arcEventConfirmSide',
						args: { sideId: sideId } }]"
		_soundSet = "'quest_item'"
	)
)

(def element ArcEventSideSelectionCardTooltip (_sideId:number = 0, _chosenSidesMap:dict = {}, _rewards:array = [])
	(scope
		(var sideName:gfx = "tr('IDS_ARC_EVENT_COMMON_SIDE_' + _sideId)")
		(var sideHint:gfx = "tr('IDS_ARC_EVENT_CHOOSE_SIDE_MOUSE_INSTRUCTION_' + _sideId)")
		(var isChosen:bool = "_chosenSidesMap[_sideId][0]")
		(var isMainRewardReceived:bool = "_chosenSidesMap[_sideId][1]")
	)
	(style (width = 340px) (hitTest = false))
	(macro TOOLTIP_SYSTEM_DEFAULT_BACKGROUND)
	(element TOOLTIP_SYSTEM_DEFAULT_CONTAINER
		(element TooltipSystemHeaderSubheaderText _headerText = "sideName")
		(element TooltipSystemHorizontalDivider)

		(block
			(style (width = 100%))
			(controller $Instance renderer='TooltipSystemStatusLine'
				(bind enabled "isChosen")
				(args
					_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.CHECK"
					_text = 'IDS_ARC_EVENT_PLAYED_FOR_SIDE'
				)
			)
		)
		(block
			(style (width = 100%))
			(controller $Instance renderer='TooltipSystemHorizontalDivider' (bind enabled "isChosen"))
		)

		(block
			(style (width = 100%))
			(controller $Instance renderer='TooltipSystemStatusLine'
				(bind enabled "isMainRewardReceived")
				(args
					_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.CHECK"
					_text = 'IDS_ARC_EVENT_LOYALTY_REWARD_REACHED'
				)
			)
		)
		(block
			(style (width = 100%))
			(controller $Instance renderer='TooltipSystemHorizontalDivider' (bind enabled "isMainRewardReceived"))
		)

		(element TooltipSystemDescriptionText _descriptionText = 'IDS_ARC_EVENT_CHANGE_SIDE_IN_NEXT_SPRINT')
		(element TooltipSystemHorizontalDivider)

		(element TooltipSystemDHRewards
			_rewardsTitle = 'IDS_TOOLTIP_REWARDS_TITLE'
			_rewards = "_rewards"
		)
		(element TooltipSystemHorizontalDivider)

		(element TooltipSystemStatusLine
			_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.MOUSE_LEFT"
			_text = "sideHint"
		)
	)
)

(def element ArcEventSideStereotype (_size:number = 0, _sideId:gfx = -1, _isSelected:bool = false, _isChooseSideMW:bool = false)
	(scope
		(var dimensions:dict = "{	SC.Ui_styles.SIZE.SMALL:		{	iconWidth: 48,
																		iconHeight: 48,
																		iconMargin: SXS},
									SC.Ui_styles.SIZE.MEDIUM:		{	iconWidth: 184,
																		iconHeight: 184,
																		iconMargin: SXS},
									SC.Ui_styles.SIZE.LARGE:		{	iconWidth: 264,
																		iconHeight: 264,
																		iconMargin: SXS},
									SC.Ui_styles.SIZE.EXTRA_LARGE:	{	iconWidth: 296,
																		iconHeight: 296,
																		iconMargin: M}}")
		(var sideId:str = "_sideId == -1 ? 'none' : toString(_sideId)")
		(var bgImage:str = "'url:../events/arc_event/common/icon_side_' + sideId + '_' + toLower(SC.Ui_styles.SIZE.VALUE_TO_NAME[_size]) + '.png'")
		(var titleColor:number = "_isSelected ? SC.Ui_styles.SERVICE_COLORS.YELLOW : SC.Ui_styles.SERVICE_COLORS.WHITE")
		(var title:str = "tr('IDS_ARC_EVENT_COMMON_SIDE_' + sideId)")
	)
	(block
		(style
			(bind width "dimensions[_size].iconWidth")
			(bind height "dimensions[_size].iconHeight")
			(bind backgroundImage "bgImage")
		)
	)

	(block
		(bind visible "_size != SC.Ui_styles.SIZE.SMALL && _sideId != -1")
		(style (width = 100%) (align = "center") (bind marginTop "dimensions[_size].iconMargin"))
		(tf
			(class $TextDefaultBold21NM)
			(style (bind textColor "titleColor") (bind alpha "_isSelected ? 1 : TA"))
			(bind text "title")
		)
	)
	(controller $Tooltip
		(renderer = 'ArcEventSideStereotypeTooltip')
		(bind enabled "!_isChooseSideMW")
		(args _sideId = "_sideId")
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)
)

(def element ArcEventSideStereotypeTooltip (_sideId:number = 0, _rewards:array = [])
	(scope
		(var arcEventEntity:dhEntity = "getSingleEntity(CC.arcEvent)")
		(var sideId:number = "arcEventEntity.playerArcEventInfo.sideId ?: 0" (event "arcEventEntity.playerArcEventInfo.evSideChanged"))
		(var isPlayerSide:bool = "sideId == _sideId")
		(var sideName:str = "tr('IDS_ARC_EVENT_COMMON_SIDE_' + _sideId)")
		(var sideDescription:str = "tr('IDS_ARC_EVENT_COMMON_SIDE_DESCRIPTION_' + _sideId)")
		(var sideUnifiedStatus:str = "isPlayerSide ? SC.Ui_styles.UNIFIED_STATUS.CHECK : SC.Ui_styles.UNIFIED_STATUS.DEFAULT")
	)
	(style (width = 340px) (hitTest = false))
	
	(macro TOOLTIP_SYSTEM_DEFAULT_BACKGROUND)
	(element TOOLTIP_SYSTEM_DEFAULT_CONTAINER
		(element TooltipSystemHeaderSubheaderText
			_headerText = "sideName"
			_unifiedStatus = "sideUnifiedStatus"
		)
		(element TooltipSystemHorizontalDivider)

		(block
			(style (width = 100%))
			(controller $Instance renderer='TooltipSystemStatusLine'
				(bind enabled "isPlayerSide")
				(args
					_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.CHECK"
					_text = 'IDS_ARC_EVENT_MAIN_SCREEN_STATUS_YOUR_SIDE'
				)
			)
		)
		(block
			(style (width = 100%))
			(controller $Instance renderer='TooltipSystemHorizontalDivider' (bind enabled "isPlayerSide"))
		)

		(element TooltipSystemDescriptionText _descriptionText = "sideDescription")
		(block
			(style (width = 100%))
			(controller $Instance renderer='TooltipSystemHorizontalDivider' (bind enabled "_rewards"))
		)

		(block
			(style (width = 100%))
			(controller $Instance renderer='TooltipSystemDHRewards'
				(bind enabled "_rewards")
				(args
					_rewardsTitle = 'IDS_TOOLTIP_REWARDS_TITLE'
					_rewards = "_rewards"
				)
			)
		)
	)
)

(def element ArcEventStatus (_isModalWindow:bool = false)	
	(scope
		(var arcEventEntity:dhEntity = "getSingleEntity(CC.arcEvent)")
		(var arcEventComponent:dhComponent = "arcEventEntity.arcEvent")
		(var playerArcEventInfoComponent:dhComponent = "arcEventEntity.playerArcEventInfo")

		(var arcEventstate:number = 	"arcEventComponent.state" 				(event "arcEventComponent.evEventStateChanged"))
		(var eventFinishTime:number = 	"arcEventComponent.finishTime" 			(event "arcEventComponent.evChanged"))
		(var nextPrimeAt:number = 		"arcEventComponent.nextPrimeAt" 		(event "arcEventComponent.evEventStateChanged"))
		(var finishPrimeAt:number = 	"arcEventComponent.finishPrimeAt" 		(event "arcEventComponent.evEventStateChanged"))
		(var playerSideId:number = 		"playerArcEventInfoComponent.sideId" 	(event "playerArcEventInfoComponent.evSideChanged"))

		
		(var playerProgressEntity:dhEntity = "getPrimaryEntity(CC.progressWithRewards, 'personal' + playerSideId)")
		(var progressWithRewardsComponent:dhComponent = "playerProgressEntity.progressWithRewards")

		(var personalRewardIndex:number = 	"(progressWithRewardsComponent.activeIndex 	?: 0) - 1" 	(event "progressWithRewardsComponent.evChanged"))
		(var personalProgress:number = 		"progressWithRewardsComponent.pointsCurrent ?: 0" 		(event "progressWithRewardsComponent.evChanged"))
		(var personalProgressArray:array = 	"progressWithRewardsComponent.pointsArray 	?: []" 		(event "progressWithRewardsComponent.evChanged"))

		(var isPersonalRewardIndex:bool = "personalRewardIndex >= 0")
		(var personalProgressArrayMaxIndex:number = "personalProgressArray.length - 1")
		(var pointsTillNextRewardTotal:number = "isPersonalRewardIndex ? personalProgressArray[personalRewardIndex + 1] : personalProgressArray[0]")
		(var pointsTillNextRewardRemaining:number = "pointsTillNextRewardTotal - personalProgress")
		(var hasReceivedAllRewards:bool = "personalRewardIndex == personalProgressArrayMaxIndex")

		(struct serverTime = SERVER_TIME())
		(var isEventEnded:bool = "serverTime.value >= eventFinishTime")

		(struct primeCountDownStart = 	COUNTDOWN(_time = "nextPrimeAt ?: 0" 	_serverTime = "serverTime.value" _format = "'HH:mm:ss'"))
		(struct primeCountDownFinish = 	COUNTDOWN(_time = "finishPrimeAt ?:0"	_serverTime = "serverTime.value" _format = "'HIGHEST,WITH_DAYS'"))
		
		(var isPrimeTimeActive:bool = 	"(arcEventstate & SC.Sse.RVR_EVENT_STATE.PRIME_ACTIVE) 		!= 0")
		(var isEventFinished:bool = 	"(arcEventstate & SC.Sse.RVR_EVENT_STATE.EVENT_FINISHED) 	!= 0")
		(var isPlayerChoseSide:bool = 	"(arcEventstate & SC.Sse.RVR_EVENT_STATE.SIDE_CHOSEN) 		!= 0")

		(var statusText:str = "	isEventFinished 							? 'IDS_ARC_EVENT_COMMON_STATUS_CALCULATING_EVENT_RESULTS' :
								!isPlayerChoseSide 							? 'IDS_ARC_EVENT_COMMON_STATUS_CHOOSE_SIDE' :
								isPrimeTimeActive && _isModalWindow 		? subst('IDS_SUBST_ARC_EVENT_COMMON_STATUS_PRIMETIME_ENDS_IN_FULL', [], 
																					{ _timeEnd: primeCountDownFinish.value }) :
								isPrimeTimeActive && hasReceivedAllRewards	? 'IDS_ARC_EVENT_PORT_STATUS_ALL_REWARDS_RECEIVED' :
								isPrimeTimeActive							? subst('IDS_ARC_EVENT_PORT_STATUS_POINTS_TILL_NEXT_REWARD', [],
																					{ _pointsNext: pointsTillNextRewardRemaining }, pointsTillNextRewardRemaining) :
								!nextPrimeAt								? 'IDS_ARC_EVENT_COMMON_STATUS_ALL_PRIMETIMES_ENDED' :
								_isModalWindow								? subst('IDS_SUBST_ARC_EVENT_COMMON_STATUS_PRIMETIME_STARTS_IN_FULL', [],
																					{ _timeStart: primeCountDownStart.value })
																			: subst('IDS_ARC_EVENT_COMMON_STATUS_PRIMETIME_STARTS_IN_SHORT', [],
																					{ _timeStart: primeCountDownStart.value })")
	)
	(style (bind width "_isModalWindow ? auto : 100%"))

	(controller $Instance renderer='StatusLine'
		(bind enabled "_isModalWindow")
		(args
			_unifiedStatus = "isPrimeTimeActive && nextPrimeAt ? SC.Ui_styles.UNIFIED_STATUS.DATE : SC.Ui_styles.UNIFIED_STATUS.DEFAULT"
			_text = "statusText"
		) 
	)

	(tf
		(bind visible "!_isModalWindow")
		(class $TextDefaultNM)
		(style (width = 172px) (alpha = 0.7))
		(bind text "statusText")
	)
)