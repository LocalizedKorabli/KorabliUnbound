(def constant CREW_ITEM_WIDTH "{1280:346, 1920:520}")
(def constant CREW_ITEM_HEIGHT 100px)
(def constant CREW_LIST_ITEMS_OFFSET "{720:8, 1080:20}")

(def element CrewList (_shipId:number = 0, _path:str = '', _isReversed:bool = false)
	(scope
		(event evScrollToBegin)
		(event evScrollToIndex)
		(event evScrollAreaValueChanged)
		(event evGuidingTipEnabled)

		(var collection:dhCollection =		"getCollection(CC.crew)")
		(var subCollection:dhCollection =	"collection.getChildByPath(_path)" (event "collection.evChildAdded") (event "collection.evChildRemoved") (event "collection.evChildUpdated"))
		(var subCollectionArray:array =		"subCollection.items ?: []" (event "subCollection.evUpdated") (event "subCollection.evAdded") (event "subCollection.evRemoved"))

		(var isGuidingTipEnabled:bool = true)
		(bind isGuidingTipEnabled "false" init=false watch=false (event "evScrollAreaValueChanged"))
		(bind isGuidingTipEnabled "true" init=false watch=false (event "evGuidingTipEnabled"))
	)
	(dispatch evGuidingTipEnabled delay=1 reuse=true (event "evScrollAreaValueChanged"))

	(style
		(position = "absolute")
		(width = "CREW_ITEM_WIDTH")
		(height = 100%)
	)

	(scrollArea
		(class $Fullsize)
		(style (backgroundColor = "NO_COLOR"))

		(verticalSlider = 'ScrollBarVLightWithValueChangedEvent')
		(hscrollPolicy = 'off')
		(vscrollPolicy = 'auto')
		(scrollPerItem = true)

		(wheelScrollSpeed = 1.0)
		(wheelScrollAcceleration = 0.9)

		(activeControlsAlpha = 1)
		(inactiveControlsAlpha = 1)
		(bottomShadow = 'ScrollAreaShadowBottom')
		(repeatController = 'crewListItemRenderer')

		(content
			(class $Fullsize)
			(style
				(marginTop = "CREW_LIST_ITEMS_OFFSET")
				(backgroundColor = "NO_COLOR")
			)

			(block
				(style
					(bind flow "_isReversed ? reverse_vertical : vertical")
					(width = 100%)
				)

				(controller $DynamicRepeat renderer='CrewListItemRenderer' name='crewListItemRenderer'
					(bind count "subCollectionArray.length")
					(args
						_shipId = "_shipId"
						_crewEntityId = "subCollectionArray[$index].id"
						_isGuidingTipEnabled = "isGuidingTipEnabled"
					)
					(itemHeight = "CREW_ITEM_HEIGHT")
				)
			)

			(block
				(style
					(width = 100%)
					(height = "CREW_LIST_ITEMS_OFFSET")
				)
			)
		)

		(bindcall scrollToBegin animated=false (bind trigger "_shipId"))
	)
)

(def element NoCrewInListPlug (_text:str)
	(class $Fullsize)
	(style
		(paddingRight = "SXS")
		(paddingLeft = "SXS")
		(align = "middle")
		(hitTest = false)
	)

	(tf
		(class $TextDefault17NM)
		(style
			(marginTop = -50%)
			(width = 100%)
			(textAlign = "center")
			(alpha = "TC")
		)

		(bind text "toUpper(_text)")
	)
)

(def element CrewListItemRenderer (_shipId:number = 0, _crewEntityId:number = 0, _isGuidingTipEnabled:bool = false)
	(scope
		(event evCrewIdChanged)

		(macro MOUSE_HANDLER_SCOPE)
		(macro PULL_CREW_DATA "'crewsSingleton'")

		(var shipTargetOwnEntity:dhEntity = "getPrimaryEntity(CC.ownShip, _shipId)")
		(var targetShipInfo:dhComponent = "shipTargetOwnEntity.ship" (event "shipTargetOwnEntity.ship.evUpdate"))

		(var shipSubtype:str = "targetShipInfo.subtype ?: ''")
		(var isWithoutCrewPenalty:bool = "targetShipInfo.isWithoutCrewPenalty")

		(var resourceEntity:dhEntity = "getSingleEntity(CC.accountResource)")
		(var operationsAccountLocked:bool = "resourceEntity.accountResource.operationsLocked" (event "resourceEntity.accountResource.evOperationsLockChanged"))

		(struct crew =	PULL_CREW_BY_ENTITY_INDEX(_id = "_crewEntityId"))

		(var crewId:number = "crew.component.id ?: 0")
		(var baseUrl:str = "crew.component.baseUrl ?: ''" (event "crew.component.evRankChanged"))
		(var overlayUrl:str = "crew.component.overlayUrl ?: ''" (event "crew.component.evRankChanged"))
		(var classificationId:number = "crew.component.classificationId ?: 0" (event "crew.component.evChanged"))
		(var allSkillPoints:number = "crew.component.allSkillPoints ?: 0" (event "crew.component.evLevelUp"))
		(var timeRentTimeStamp:number = "crew.component.timeRent ?: 0" (event "crew.component.evTimeRentChanged") (event "crew.component.evChanged"))
		(var canMove:bool = "crew.component && crew.component.canMove" (event "crew.component.evChanged"))
		(var isInBarracks:bool = "crew.component.isInBarracks")
		(var crewNation:str = "crew.component.nation ?: ''" (event "crew.component.evChanged"))

		(var dismissDelay:number = "crew.component.dismissDelay ?: 0" (event "crew.component.evDismissDelayChanged"))
		(var isDismissing:bool = "dismissDelay > 0")

		(var specializationID:number = "crew.component.specializationID ?: 0" (event "crew.component.evChanged"))
		(var shipId:number = "crew.component.shipID ?: 0" (event "crew.component.evShipChanged"))
		(var crewShipId:number = "isInBarracks || isDismissing ? specializationID : shipId")

		(var ownShipEntity:dhEntity = "getPrimaryEntity(CC.ownShip, shipId)")
		(var isThisLocked:bool = "ownShipEntity.ownShip.isLocked" (event "ownShipEntity.ownShip.evUpdateLock"))
		(var isThisInFormation:bool = "ownShipEntity.ownShip.isInFormation" (event "ownShipEntity.ownShip.evUpdateLock"))
		(var isTargetLocked:bool = "shipTargetOwnEntity.ownShip.isLocked" (event "shipTargetOwnEntity.ownShip.evUpdateLock"))
		(var isTargetFormation:bool = "shipTargetOwnEntity.ownShip.isInFormation" (event "shipTargetOwnEntity.ownShip.evUpdateLock"))
		(var targetCrewId:number = "shipTargetOwnEntity.ownShip.crewId ?: 0" (event "shipTargetOwnEntity.ownShip.evCrewChanged"))
		(var canDisassignCrew:bool = "crewsSingleton.canDisassignCrew" (event "crewsSingleton.evUpdate"))

		(var targetCrewEntity:dhEntity = "getPrimaryEntity(CC.crew, targetCrewId)")

		
		(var isCrewSpecialization:bool = "specializationID > 0")
		(var isEmptyCrew:bool = "crewNation == SC.Common.NATION.COMMON")
		(var isCrewNationSpecialization:bool = "!isCrewSpecialization && !isEmptyCrew")

		(var isFromBarracks:bool = "shipId == 0")
		(var hasSpaceToAssignCrew:bool = "isFromBarracks || canDisassignCrew || (!canDisassignCrew && targetCrewId == 0)")
		(var crewLockReason:str =	"	isThisInFormation		? 'IDS_CREW_LIST_OVERLAY_STATUS_THIS_IN_DIVISION' :
										isThisLocked			? 'IDS_CREW_LIST_OVERLAY_STATUS_THIS_IN_BATTLE' :
										isTargetFormation		? 'IDS_CREW_LIST_OVERLAY_STATUS_TARGET_IN_DIVISION' :
										isTargetLocked			? 'IDS_CREW_LIST_OVERLAY_STATUS_TARGET_IN_BATTLE' :
										!hasSpaceToAssignCrew	? 'IDS_CREW_LIST_OVERLAY_STATUS_BARRACK_IS_FULL'
																: 'no_reason'")

		(var isRental:bool = "timeRentTimeStamp > 0")
		(var isDisabledAssign:bool = "targetCrewId == 0	?	crew.component && !canMove
														:	crew.component && (!canMove || (targetCrewEntity && !targetCrewEntity.crew.canMove))" (event "targetCrewEntity.crew.evChanged"))

		(var isCrewCompatibleShipBySpecialList:bool = "indexOf(targetShipInfo.fullName, crew.component.shipsToSeat) > -1" (event "crew.component.evChanged") (event "targetShipInfo.evUpdate"))
		(var isCrewCompatibleShipByNation:bool = "indexOf(targetShipInfo.nation, crew.component.nationsToSeat) > -1" (event "crew.component.evChanged") (event "targetShipInfo.evUpdate"))
		(var isCrewCompatibleShipByPeculiarity:bool = "indexOf(targetShipInfo.peculiarity, crew.component.peculiaritiesToSeat) > -1" (event "crew.component.evChanged") (event "targetShipInfo.evUpdate"))
		(var isCrewCompatibleShipByGroup:bool = "indexOf(targetShipInfo.group, crew.component.shipGroups) > -1" (event "crew.component.evChanged") (event "targetShipInfo.evUpdate"))
		(var isCrewCompatibleShipBySpecialization:bool = "specializationID == _shipId")
		(var crewHasCompatibleShip:bool = "	isCrewCompatibleShipBySpecialList || isCrewCompatibleShipByNation ||
											isCrewCompatibleShipByPeculiarity || isCrewCompatibleShipByGroup")
		(var isCrewCompatibleForTargetShip:bool =	"	isRental			?	isCrewCompatibleShipBySpecialization :
														isDisabledAssign	?	false
																			:	crewHasCompatibleShip")

		(var isSkillInfoButtonVisible:bool = "!isThisInFormation")

		(var canAssignWithoutRetrain:bool =	"	isCrewCompatibleShipBySpecialization || isWithoutCrewPenalty || specializationID == 0 ||
												isDisabledAssign || isRental")
		(var bgImage:str = "!isCrewCompatibleForTargetShip	?	'url:../crew_commander/icons/negative_big.png'
															:	'url:../crew_commander/icons/retraining_big.png'")

		(var forceOverlayStatusVisible:bool = "isThisInFormation || isThisLocked")
		(var isOverlayedStatusVisible:bool = "(crewLockReason != 'no_reason' && (rollOver || forceOverlayStatusVisible)) && !isDismissing")

		(var isFaded:bool = "isOverlayedStatusVisible || !isCrewCompatibleForTargetShip || isDisabledAssign")
		(var isClickable:bool = "!(isDismissing || isOverlayedStatusVisible) && !operationsAccountLocked && isCrewCompatibleForTargetShip && !isDisabledAssign")
		(var isHighlighted:bool = "(rollOver && !mouseDown) && isClickable")

		(var isEmptyCrewHireRequest:bool =	"isEmptyCrew || (isCrewNationSpecialization && !isWithoutCrewPenalty)")
		(var externalCallType:str =			"!isClickable											? '' :
											 !canAssignWithoutRetrain || isEmptyCrewHireRequest		? 'inputMapping.onRequest'
																									: 'inputMapping.onAction'")
		(var externalCallName:str =			"isEmptyCrewHireRequest									? CREW_ACTIONS.OPEN_HIRE_EMPTY :
											 isClickable && !canAssignWithoutRetrain				? CREW_ACTIONS.OPEN_CREW_RETRAIN_WINDOW
																									: CREW_ACTIONS.ASSIGN_TO_SHIP")

		(struct crewHireTip = PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.CREW_HIRE"))
		(struct crewHireRepeatTip = PULL_GUIDING_TIP(_type = "SC.Context_guiding_tip.TIP_TYPE.CREW_HIRE_REPEAT"))
		(var guidingTipId:number = "	crewHireTip.isActive		? SC.Context_guiding_tip.TIP_TYPE.CREW_HIRE :
										crewHireRepeatTip.isActive	? SC.Context_guiding_tip.TIP_TYPE.CREW_HIRE_REPEAT
																	: SC.Context_guiding_tip.TIP_TYPE.NONE")
		(var isNewTipVisible:bool = "guidingTipId != SC.Context_guiding_tip.TIP_TYPE.NONE && $index==0 && isFromBarracks && _isGuidingTipEnabled")
	)

	(style
		(width = "CREW_ITEM_WIDTH")
		(height = "CREW_ITEM_HEIGHT")
		(marginBottom = "CREW_LIST_ITEMS_OFFSET")
		(paddingLeft = "{ 1280: S, 1920: LM }")
		(paddingRight = "{ 1280: S, 1920: LM }")
	)

	(hblock
		(macro MOUSE_EVENTS_DISPATCHER)

		(class $Fullsize)
		(style (backgroundColor = "SC.Ui_styles.SERVICE_COLORS.INNER_PANEL"))

		
		(block
			(style (hitTest = false))
			(element CrewPortraitWithBGR
				_baseUrl = "baseUrl"
				_overlayUrl = "overlayUrl"
				_classificationId = "classificationId"
				_portraitWidth = 100px
				_portraitHeight = 92px
				_borderSize = "XS"
			)
			(block
				(style (position = "absolute") (bottom = "XS") (right = "XS"))
				(controller $Instance renderer='CrewSkillPoints'
					(bind enabled "allSkillPoints > 0")
					(args
						_crewId = "crewId"
						_shipClass = "shipSubtype"
					)
				)
			)
		)

		
		(block
			(class $Fullsize)
			(style (padding = [16, 16, 12, 16]) (hitTest = false) (bind alpha "isDismissing || isFaded ? 0.4 : 1"))
			(block
				(style (width = 100%) (marginBottom = "M"))
				(element CrewNameWithIcon
					_crewId = "crewId"
					_isAutoSized = true
				)
			)

			(block
				(style
					(position = "absolute")
					(width = 100%)
					(bind bottom "isCrewSpecialization || (isCrewNationSpecialization && shipId) ? 0 : -S")
				)
				(controller $Instance renderer='ShipLineItemNM'
					(bind enabled "isCrewSpecialization || (isCrewNationSpecialization && shipId)")
					(args
						_shipId = "crewShipId"
						_withFlag = true
						_width = '100%'
					)
				)

				(controller $Instance renderer='NationFlagsTiny'
					(bind enabled "isCrewNationSpecialization && !shipId")
					(args
						_shipCountry = "crewNation"
					)
				)
			)
		)

		
		(block
			(bind name "'CrewList_' + crewId")
			(bindcall externalCall "externalCallType" "[externalCallName, { crewId: crewId, shipId: _shipId }]" watch=false on='leftClick')

			(class $FullsizeAbsolute)

			(block
				(class $Fullsize)
				(style
					(backgroundColor = 0x22FFFFFF)
					(alpha = 0)
				)

				(controller $Animation
					(bindcall play
						duration = 0.1
						from = "{ alpha: 0 }"
						to = "{ alpha: 1}"
						reverse = "!isHighlighted"
						(bind trigger "isHighlighted")
					)
				)
			)

			(controller $Tooltip
				(bind enabled "!isDismissing")
				(renderer = 'CrewListMenu')
				(args
					_crewId = "crewId"
					_shipId = "_shipId"
					_isCrewCompatibleForTargetShip = "isCrewCompatibleForTargetShip"
					_canAssignWithoutRetrain = "canAssignWithoutRetrain"
				)
				(macro DEFAULT_MENU_BEHAVIOUR "1")
			)

			(controller $Tooltip
				(renderer='CrewTooltip')
				(args
					_crewId = "crewId"
					_targetShipId = "_shipId"
				)
				(macro DEFAULT_TOOLTIP_BEHAVIOUR)
			)
		)

		
		(block
			(bind visible "isFaded && !isDisabledAssign")

			(class $FullsizeAbsolute)
			(style
				(hitTest = false)
				(align = "middle|center")
				(backgroundColor = 0x70101010)
			)

			(tf
				(class $TextDefaultBoldNM)
				(style
					(width = 100%)
					(textAlign = "center")
					(textColor = "SC.Ui_styles.SERVICE_COLORS.ORANGE")
					(alpha = 0)
					(visualOffsetY = 15px)
				)

				(bind text "crewLockReason")

				(controller $Animation
					(bindcall play
						init = true
						duration = 0.15
						delay = 0.07
						from = "{ alpha: 0, visualOffsetY: 15px }"
						to = "{ alpha: 1, visualOffsetY: 0px }"
						easing = "Easing.quad_out"
						action = "kill"
						(bind enabled "isOverlayedStatusVisible")
					)

					(bindcall play
						init = true
						duration = 0.15
						delay = 0.07
						from = "{ alpha: 1, visualOffsetY: 0px }"
						to = "{ alpha: 0, visualOffsetY: -15px }"
						easing = "Easing.quad_out"
						action = "kill"
						(bind enabled "!isOverlayedStatusVisible")
					)
				)
			)
		)

		
		(block
			(bind visible "!isCrewCompatibleForTargetShip || !canAssignWithoutRetrain")
			(style (position = "absolute") (top = "SXS") (right = "SXS") (width = 24px) (height = 24px) (bind backgroundImage "bgImage"))
		)

		
		(block
			(class $FullsizeAbsolute)
			(controller $Instance renderer='CrewListItemDismissDelayStatus'
				(bind enabled "isDismissing")
				(args
					_crewId =	"crewId"
					_rollOver =	"rollOver"
				)
			)
		)

		
		(block
			(style (position = "absolute") (bottom = "SXS") (right = "SXS") (alpha = 0) (visualOffsetY = 15px))

			(controller $Instance renderer='DefaultButton'
				(bind enabled "isSkillInfoButtonVisible")
				(args
					_type = "SC.Ui_styles.BUTTON_TYPE.ICON"
					_icon = "SC.Ui_styles.BUTTON_ICON.INFO"
					_methods = "[{ type: 'inputMapping.onRequest', name: CREW_ACTIONS.OPEN_CREW_INFO_WINDOW, args: { _crewId: crewId } }]"
				)
			)

			(controller $Tooltip
				(bind enabled "isSkillInfoButtonVisible")
				(renderer='SimpleStatusTooltip')
				(args
					_text = 'IDS_HINT_LEFT_CLICK_FOR_CREW_PROFILE'
					_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.MOUSE_LEFT"
				)
				(macro DEFAULT_TOOLTIP_BEHAVIOUR)
			)

			(controller $Animation
				(bindcall play  duration=0.1
								from="{ alpha: 0, visualOffsetY: 15px }"
								to="{ alpha: 1, visualOffsetY: 0px }"
								reverse = "!rollOver"
								(bind trigger "rollOver")
				)
			)
		)
	)

	(controller $Instance renderer='GuidingTipHub'
		(bind enabled "isNewTipVisible")
		(args
			_tipId = "guidingTipId"
			_tipPositioning = "TIP_POSITION_BOTTOM"
			_modalWindowName = 'ModalWindowCrewManagement'
		)
	)
)

(def element CrewListItemDismissDelayStatus (_crewId:number = 0, _rollOver:bool = false)
	(scope
		(var resourceEntity:dhEntity = "getSingleEntity(CC.accountResource)")
		(var operationsAccountLocked:bool = "resourceEntity.accountResource.operationsLocked" (event "resourceEntity.accountResource.evOperationsLockChanged"))

		(struct crew = PULL_CREW(_crewId = "_crewId"))
		(var dismissDelay:number = "crew.component.dismissDelay ?: 0" (event "crew.component.evDismissDelayChanged"))
	)
	(class $Fullsize)
	(style (align = "middle|center"))

	(block
		(class $FullsizeAbsolute)
		(style (backgroundColor = 0x99000000) (hitTest = false))
	)

	(block
		(style (width = 100%) (alpha = 0) (visualOffsetY = 20px))
		(bindcall externalCall "operationsAccountLocked ? '' : 'inputMapping.onAction'" "['unfireCrew', { crewID: _crewId }]" watch=false on='click')
		(element CancelDemobilizationButton)
		(controller $Animation
			(bindcall play  duration=0.15
							from="{ alpha: 0, visualOffsetY: 20px }"
							to="{ alpha: 1, visualOffsetY: 0px }"
							reverse = "!_rollOver"
							(bind trigger "_rollOver")
			)
		)
	)

	(block
		(style (position = "absolute") (width = 100%) (hitTest = false))
		(class $MiddleVAligned)
		(element WaitingForDemobilization _dismissDelay = "dismissDelay")
		(controller $Animation
			(bindcall play  duration=0.15
							from="{ alpha: 1, visualOffsetY: 0px }"
							to="{ alpha: 0, visualOffsetY: -20px }"
							reverse = "!_rollOver"
							(bind trigger "_rollOver")
			)
		)
	)
)

(def element CancelDemobilizationButton (_crewId:number = 0)
	(scope
		(macro MOUSE_HANDLER_SCOPE)
		(macro PULL_CREW_DATA "'crewsSingleton'")

		(var canDisassignCrew:bool = "crewsSingleton.canDisassignCrew" (event "crewsSingleton.evUpdate"))
	)
	(style (width = 100%) (align = "center"))
	(block
		(bind visible "canDisassignCrew")
		(macro MOUSE_EVENTS_DISPATCHER)
		(bind name "'cancelDemobilizationButton_' + _crewId")
		(style (width = 200px) (height = 30px) (align = "middle|center"))
		(controller $Instance renderer='DefaultButtonDockBackground'
			(bind enabled "canDisassignCrew")
			(args
				_rollOver = "rollOver"
				_mouseDown = "mouseDown"
			)
		)
		(tf
			(class $TextDefaultBoldNM)
			(style (alpha = "TA"))
			(bind text "toUpper(tr('IDS_CANCEL_DEMOBILIZATION'))")
		)
		(controller $Tooltip
			(renderer='SimpleStatusTooltip')
			(args
				_text = 'IDS_RETURN_CREW_TO_BARRACKS'
				_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.MOUSE_LEFT"
			)
			(macro DEFAULT_TOOLTIP_BEHAVIOUR)
		)
	)
	(block
		(bind visible "!canDisassignCrew")
		(style (width = 100%) (hitTest = false))
		(tf
			(class $TextDefaultNM)
			(style (width = 100%) (textAlign = "center") (textColor = "SC.Ui_styles.SERVICE_COLORS.ORANGE"))
			(text = 'IDS_TO_CANCEL_EXPAND_BARRACKS')
		)
	)
)

(def element WaitingForDemobilization (_dismissDelay:number = 0)
	(scope
		(macro SERVER_TIME_SCOPE)
		(macro COUNTDOWN_SCOPE "'formattedFinishTime'" "_dismissDelay" "'mm:ss'")
	)

	(style (width = 100%))

	(tf
		(class $TextDefaultBoldNM)
		(style (width = 100%) (textAlign = "center") (textColor = "SC.Ui_styles.SERVICE_COLORS.ORANGE"))
		(bind text "toUpper(tr('IDS_WAITING_FOR_DEMOBILIZATION_COLON'))")
	)

	(tf
		(class $TextDefaultBoldNM)
		(style (width = 100%) (textAlign = "center") (marginTop = "S") (textColor = "SC.Ui_styles.SERVICE_COLORS.ORANGE"))
		(bind text "formattedFinishTime")
	)
)

(def element CrewListMenu (	_crewId:number = 0, _shipId:number = 0,_isCrewCompatibleForTargetShip:bool = false,
							_canAssignWithoutRetrain:bool = false)
	(scope
		(macro PULL_CREW_DATA "'crewsSingleton'")
		(macro PULL_SHIP_SCOPE "_shipId" "'shipTargetOwnEntity'" "'targetShipInfo'")

		(var resourceEntity:dhEntity = "getSingleEntity(CC.accountResource)")
		(var operationsAccountLocked:bool = "resourceEntity.accountResource.operationsLocked" (event "resourceEntity.accountResource.evOperationsLockChanged"))

		(struct crew = PULL_CREW(_crewId = "_crewId"))

		(var crewId:number = "crew.component.id ?: 0")
		(var shipId:number = "crew.component.shipID ?: 0" (event "crew.component.evShipChanged"))
		(var isCrewFireAvailable:bool = "crew.component.canDismiss")
		(var isInBarracks:bool = "crew.component.isInBarracks")
		(var classificationId:number = "crew.component.classificationId")
		(var timeRent:number = "crew.component.timeRent ?: 0" (event "crew.component.evTimeRentChanged") (event "crew.component.evChanged"))
		(var canDisassignCrew:bool = "crewsSingleton.canDisassignCrew" (event "crewsSingleton.evUpdate"))
		(var dismissDelay:number = "crew.component.dismissDelay ?: 0" (event "crew.component.evDismissDelayChanged"))
		(var specializationID:number = "crew.component.specializationID" (event "crew.component.evChanged"))
		(var crewNation:str = "crew.component.nation ?: ''" (event "crew.component.evChanged"))
		(var isDismissing:bool = "dismissDelay > 0")

		(var isWithoutCrewPenalty:bool = "targetShipInfo.isWithoutCrewPenalty")
		(var targetCrewId:number = "shipTargetOwnEntity.ownShip.crewId ?: 0" (event "shipTargetOwnEntity.ownShip.evCrewChanged"))
		(var isLocked:bool = "shipTargetOwnEntity.ownShip.isLocked" (event "shipTargetOwnEntity.ownShip.evUpdateLock"))
		(var isInFormation:bool = "shipTargetOwnEntity.ownShip.isInFormation" (event "shipTargetOwnEntity.ownShip.evUpdateLock"))

		(var targetCrewEntity:dhEntity = "getPrimaryEntity(CC.crew, targetCrewId)")
		(var canMove:bool = "crew.component && crew.component.canMove" (event "crew.component.evChanged"))
		(var isDisabledAssign:bool = "targetCrewId == 0	?	crew.component && !canMove
														:	crew.component && (!canMove || (targetCrewEntity && !targetCrewEntity.crew.canMove))" (event "targetCrewEntity.crew.evChanged"))

		(var isFromBarracks:bool = "shipId == 0")
		(var hasSpaceToAssignCrew:bool = "isFromBarracks || canDisassignCrew || (!canDisassignCrew && targetCrewId == 0)")

		(var ownShipEntity:dhEntity = "getPrimaryEntity(CC.ownShip, shipId)")
		(var isThisLocked:bool = "ownShipEntity.ownShip.isLocked" (event "ownShipEntity.ownShip.evUpdateLock"))
		(var isThisInFormation:bool = "ownShipEntity.ownShip.isInFormation" (event "ownShipEntity.ownShip.evUpdateLock"))

		(var forceOverlayStatusVisible:bool = "isThisInFormation || isThisLocked")
		(var isOverlayedStatusVisible:bool = "forceOverlayStatusVisible && !isDismissing")
		(var canAssignTargetCrewToOwnShip:bool = "	!(isDismissing || isOverlayedStatusVisible) &&
													!operationsAccountLocked && _isCrewCompatibleForTargetShip &&
													(!isInFormation || !isLocked) &&
													hasSpaceToAssignCrew && !isDisabledAssign")

		
		(var isCrewSpecialization:bool = "specializationID > 0")
		(var isEmptyCrew:bool = "crewNation == SC.Common.NATION.COMMON")
		(var isCrewNationSpecialization:bool = "!isCrewSpecialization && !isEmptyCrew")

		(var isDisassignButtonEnabled:bool = "!isThisLocked && !isThisInFormation")
		(var isEmptyCrewOrNationSpecialization:bool = "isEmptyCrew || (isCrewNationSpecialization && !isWithoutCrewPenalty)")

		(var assignRequest:str =	"isEmptyCrewOrNationSpecialization	? CREW_ACTIONS.OPEN_HIRE_EMPTY :
									 _canAssignWithoutRetrain			? ''
																		: CREW_ACTIONS.OPEN_CREW_RETRAIN_WINDOW")
		(var assignRequestArgs:dict =	"isEmptyCrewOrNationSpecialization	? { crewId: crewId, shipId: _shipId } :
										 _canAssignWithoutRetrain			? {}
																			: { crewId: crewId, shipId: _shipId }")
		(var assignAction:str =			"_canAssignWithoutRetrain && !isEmptyCrewOrNationSpecialization ? CREW_ACTIONS.ASSIGN_TO_SHIP : ''")

		(var assignTooltipText:str =	"timeRent > 0 || isDisabledAssign	? 'IDS_TOOLTIP_STATUS_NEED_CHOOSE_OTHER_SHIP_FOR_CREW' :
										 canDisassignCrew					? 'IDS_ASSIGN_NEW_CREW_DISABLE_REASON_FULL_BARRACKS'
																			: 'IDS_TOOLTIP_STATUS_NEED_CHOOSE_OTHER_SHIP'")

		(var disAssignRequest:str = "canDisassignCrew ? '' : CREW_ACTIONS.INCREASE_BARRACKS_CAPACITY")
		(var disAssignAction:str = "canDisassignCrew ? CREW_ACTIONS.DISASSIGN : ''")
		(var isDisassignTooltip:bool = "isThisInFormation || isThisLocked || !canDisassignCrew")

		(var tooltipDataArray:array = "	isThisInFormation	?	[	{	unifiedStatus: SC.Ui_styles.UNIFIED_STATUS.NEGATIVE,
																		text: 'IDS_DISASSIGN_CREW_DENY_REASON_IN_FORMATION'}] :
										isThisLocked		?	[	{	unifiedStatus: SC.Ui_styles.UNIFIED_STATUS.NEGATIVE,
																		text: 'IDS_DISASSIGN_CREW_DENY_REASON_IN_BATTLE'}]
															:	[	{	unifiedStatus: SC.Ui_styles.UNIFIED_STATUS.NEGATIVE,
																		text: 'IDS_ASSIGN_NEW_CREW_DISABLE_REASON_FULL_BARRACKS'},
																	{	unifiedStatus: SC.Ui_styles.UNIFIED_STATUS.MOUSE_LEFT,
																		text: 'IDS_EXPAND_BARRACKS'}]")

		(var isDismissCrewVisible:bool = "canMove && !isInBarracks")
		(var isFireButtonEnabled:bool = "!isThisLocked && !isThisInFormation")
		(var isFireCrewTooltip:bool = "isThisInFormation || isThisLocked || !isCrewFireAvailable")
		(var fireCrewTooltipText:str =	"	isThisInFormation	?	'IDS_FIRE_CREW_DENY_REASON_IN_FORMATION' :
											isThisLocked		?	'IDS_FIRE_CREW_DENY_REASON_IN_BATTLE'
																:	'IDS_CREW_CAN_NOT_BE_DEMOBOLIZED'")
	)

	(name = 'CrewContextMenu')
	(class $ContextMenuDimensions)
	(macro TOOLTIP_SYSTEM_DEFAULT_BACKGROUND)
	(block
		(name = 'AssignCrewToOwnShipButton')
		(style (width = 100%))
		(element ContextMenuItem
			_title = 'IDS_ASSIGNED_CREW_TO_OWN_SHIP'
			_enabled = "canAssignTargetCrewToOwnShip"
			_methods = "[	{ type: 'inputMapping.onRequest', name: assignRequest, args: assignRequestArgs},
							{ type: 'inputMapping.onAction', name: assignAction, args: { crewId: crewId, shipId: _shipId }}]"
		)
		(controller $Tooltip
			(renderer='SimpleStatusTooltip')
			(bind enabled "!canAssignTargetCrewToOwnShip")
			(args
				_text = "assignTooltipText"
				_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.NEGATIVE"
			)
			(macro DEFAULT_TOOLTIP_BEHAVIOUR)
		)
	)

	(block
		(name = 'CrewProfileInfoButton')
		(style (width = 100%))
		(controller $Instance renderer='ContextMenuItem'
			(args
				_title = 'IDS_CREW_PROFILE_INFO'
				_enabled = "!isThisInFormation"
				_methods = "[{ type: 'inputMapping.onRequest', name: CREW_ACTIONS.OPEN_CREW_INFO_WINDOW, args: { _crewId: _crewId } }]"
			)
		)

		(controller $Tooltip
			(renderer='SimpleStatusTooltip')
			(bind enabled "isThisInFormation")
			(args
				_unifiedStatus =	"SC.Ui_styles.UNIFIED_STATUS.NEGATIVE"
				_text =				'IDS_HINT_CREW_INFO_UNAVAILABLE_DUE_IN_FORMATION'
			)
			(macro DEFAULT_TOOLTIP_BEHAVIOUR)
		)
	)

	(block
		(name = 'dismissCrew')
		(style (width = 100%))
		(controller $Instance renderer='ContextMenuItem'
			(bind enabled "isDismissCrewVisible")
			(args
				_title = 'IDS_CREW_TO_BARRACKS'
				_enabled = "isDisassignButtonEnabled"
				_methods = "[	{ type: 'inputMapping.onRequest', name: disAssignRequest, args: { }},
								{ type: 'inputMapping.onAction', name: disAssignAction, args: { crewId: _crewId}}]"
			)
		)
		(controller $Tooltip
			(bind enabled "isDisassignTooltip")
			(renderer = 'RepeatStatusTooltip')
			(args
				_tooltipDataArray = "tooltipDataArray"
			)
			(macro DEFAULT_TOOLTIP_BEHAVIOUR)
		)
	)

	(block
		(name = 'CrewFireButton')
		(style (width = 100%))
		(controller $Instance renderer='ContextMenuItem'
			(bind enabled "isCrewFireAvailable")
			(args
				_title = 'IDS_CREW_FIRE'
				_enabled = "isFireButtonEnabled"
				_methods = "[{ type: 'inputMapping.onRequest', name: 'openFireCrewWindow', args: { crewId: _crewId }}]"
			)
		)
		(controller $Tooltip
			(renderer='SimpleStatusTooltip')
			(bind enabled "isFireCrewTooltip")
			(args
				_text = "fireCrewTooltipText"
				_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.NEGATIVE"
			)
			(macro DEFAULT_TOOLTIP_BEHAVIOUR)
		)
	)
)