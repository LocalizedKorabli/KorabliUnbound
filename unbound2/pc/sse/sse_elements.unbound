(def constant SSE_STATUS_MAP	{
	SC.Sse.SSE_STATUSES.LOCKED_BY_PREVIOUS_SSE: 'SseStatusLockedByPrevious',
	SC.Sse.SSE_STATUSES.LOCKED_BY_TIME: 'SseStatusLockedByTime',
	SC.Sse.SSE_STATUSES.LOCKED_BECAUSE_NOT_PRIME_TIME: 'SseStatusLockedByTime',
	SC.Sse.SSE_STATUSES.ACTIVE: 'SseStatusActive',
	SC.Sse.SSE_STATUSES.FAILED: 'SseStatusFailed',
	SC.Sse.SSE_STATUSES.DONE: 'SseStatusDone',
	SC.Sse.SSE_STATUSES.REFRESH_BY_TIME_AVAILABLE: 'SseStatusRefreshByTime',
	SC.Sse.SSE_STATUSES.REFRESH_AVAILABLE: 'SseStatusRefreshByQty',
	SC.Sse.SSE_STATUSES.RESULTS_COUNTING: 'SseStatusResultsCounting',
	SC.Sse.SSE_STATUSES.REWARDS_RECEIVED: 'SseStatusRewardsReceived'
})

(def element SseMotivatorTimeStatus (_sseId:number = 0, _isSseMotivator:bool = false)
	(scope
		(var sseEntity:gfx = "$datahub.getEntity(_sseId)")
		(var statuses:array = "sseEntity.sseCore.statuses ?: []" (event "sseEntity.sseCore.evStatusesChanged"))
		(var statusRenderer:str = "	isIn(SC.Sse.SSE_STATUSES.LOCKED_BY_TIME, statuses) ||
									isIn(SC.Sse.SSE_STATUSES.LOCKED_BECAUSE_NOT_PRIME_TIME, statuses)	? 'SseStatusLockedByTime' :
									isIn(SC.Sse.SSE_STATUSES.REFRESH_BY_TIME_AVAILABLE, statuses)		? 'SseStatusRefreshByTime'
																										: 'SseStatusActive'")
	)
	(style (width = 100%))
	(controller $Instance
		(bind renderer "statusRenderer")
		(args
			_sseEntity = "sseEntity"
			_isSseMotivator = "_isSseMotivator"
		)
	)
)

(def element SseStatus (_sseId:number = 0, _isCardSimple:bool = false)
	(scope
		(var sseEntity:gfx = "$datahub.getEntity(_sseId)")
		(var isPostBattle:bool = "sseEntity.hasComponent(CC.sseCorePersistent)" (event "sseEntity.evAdded") (event "sseEntity.evRemoved"))
		(var statusesCore:array = "sseEntity.sseCore.statuses ?: []" (event "sseEntity.sseCore.evStatusesChanged"))
		(var statusesCorePersistent:array = "sseEntity.sseCorePersistent.statuses ?: []" (event "sseEntity.sseCorePersistent.evStatusesChanged"))
		(var statuses:array = "isPostBattle ? statusesCorePersistent : statusesCore")
		(var statusesCount:number = "_isCardSimple ? 1 : statuses.length")
	)
	(style (width = 100%))
	(controller $Repeat renderer='SseStatusRender'
		(bind enabled "statuses.length > 0")
		(bind count "statusesCount")
		(args
			_sseEntity = "sseEntity"
			_isCardSimple = "_isCardSimple"
			_statuses = "statuses"
		)
	)
)
(def element SseStatusRender (_sseEntity:gfx, _statuses:array = [], _isCardSimple:bool = false)
	(scope
		(var sseStatusRender:str = "_isCardSimple			? SSE_STATUS_MAP[_statuses[0]] :
									_statuses.length > 0	? SSE_STATUS_MAP[_statuses[$index]]
															: ''")
	)
	(style (width = 100%) (bind marginTop "$index ? M : 0"))
	(controller $Instance
		(bind renderer "sseStatusRender")
		(args
			_sseEntity = "_sseEntity"
			_isCardSimple = "_isCardSimple"
		)
	)
)

(def element SseStatusLockedByPrevious (_sseEntity:gfx)
	(name = 'SseStatusLockedByPrevious')
	(style (width = 100%))
	(element StatusLine
		_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.LOCK"
		_text = 'IDS_SSE_STATUS_LOCKED_PREVIOUSCHAINTASKNOTCOMPLETED'
	)
)

(def element SseStatusLockedByTime (_sseEntity:gfx)
	(scope
		(macro SERVER_TIME_SCOPE)

		(var isPrimeTime:bool = "_sseEntity.hasComponent(CC.ssePrimeTime)" (event "_sseEntity.evAdded") (event "_sseEntity.evRemoved"))
		(var primeTimeStart:number = "_sseEntity.ssePrimeTime.startAt ?: 0" (event "_sseEntity.ssePrimeTime.evChanged"))
		(var sseStartTimeStamp:number = "_sseEntity.sseCore.start ?: 0" (event "_sseEntity.sseCore.evChanged"))
		(var sseUnlocksIn:number = "isPrimeTime ? primeTimeStart : sseStartTimeStamp")

		(var timeLeft:number = "sseStartTimeStamp - serverTime")
		(var daysCount:number = "floor(timeLeft / DAY_IN_SEC)")
		(var isLastDayLeft:bool = "timeLeft < DAY_IN_SEC")
		(var isDailyFormat:bool = "isLastDayLeft || isPrimeTime")
		(var timeFormat:str = "isDailyFormat ? 'hh:mm:ss' : 'HIGHESTDAYS'")

		(var tooltipDate:str = "formatTime(sseUnlocksIn, 'dd.MM.yyyy hh:mm', '', true)")
		(macro COUNTDOWN_SCOPE "'epicUnlocksIn'" "sseUnlocksIn" "timeFormat")

		(var statusTextDaily:str = "subst('IDS_SUBST_SSE_STATUS_LOCKED_NEXTEPICNOTUNLOCKEDYET', [], { unlockTime: epicUnlocksIn })")

		(var statusTextEpicUnlocksIn:str = "subst('IDS_SUBST_SSE_STATUS_LOCKED_NEXTEPICNOTUNLOCKEDYET', [], { unlockTime: epicUnlocksIn })")
		(var tooltipText:str = "subst('IDS_SUBST_SSE_IS_ACTIVATED_AT', [], { activationDateTime: tooltipDate })")
	)
	(name = 'SseStatusLockedByTime')

	(style (width = 100%))
	(element StatusLine
		_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.LOCK"
		_text = "statusTextEpicUnlocksIn"
	)
	(controller $Tooltip
		(renderer='SimpleStatusTooltip')
		(args
			_text = "tooltipText"
		)
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)
)

(def element SseStatusActive (_sseEntity:gfx, _isCardSimple:bool = false)
	(scope
		(macro SERVER_TIME_SCOPE)

		(var isPrimeTime:bool = "_sseEntity.hasComponent(CC.ssePrimeTime)" (event "_sseEntity.evAdded") (event "_sseEntity.evRemoved"))
		(var isPostBattle:bool = "_sseEntity.hasComponent(CC.sseCorePersistent)" (event "_sseEntity.evAdded") (event "_sseEntity.evRemoved"))
		(var isSseOpenEnded:bool = "_sseEntity.hasComponent(CC.sseOpenEnded)" (event "_sseEntity.evAdded") (event "_sseEntity.evRemoved"))
		(var primeTimeEnd:number = "_sseEntity.ssePrimeTime.endAt ?: 0" (event "_sseEntity.ssePrimeTime.evChanged"))
		(var sseStartTimestamp:number = "_sseEntity.sseCore.start ?: 0" (event "_sseEntity.sseCore.evChanged"))
		(var sseCoreStopTimeStamp:number = "_sseEntity.sseCore.stop ?: 0" (event "_sseEntity.sseCore.evChanged"))
		(var progressFreezeAt:number = "_sseEntity.sseOpenEnded.freezeAt ?: 0" (event "_sseEntity.sseOpenEnded.evChanged"))
		(var ssePostBattleStopTimeStamp:number = "_sseEntity.sseCorePersistent.stop ?: 0")

		(var epicTimeLeftToUnlock:number = "sseStartTimestamp > serverTime ? sseStartTimestamp - serverTime : 0")
		(var sseStopTimeStamp:number = "isPrimeTime		? primeTimeEnd :
										isSseOpenEnded	? progressFreezeAt :
										isPostBattle	? ssePostBattleStopTimeStamp
														: sseCoreStopTimeStamp")
		(var timeLeft:number = "sseStopTimeStamp - serverTime")
		(var daysCount:number = "floor(timeLeft / DAY_IN_SEC) - epicTimeLeftToUnlock")
		(var formattedLastDayLeft:str = "formatTime(timeLeft, 'HH:mm:ss')")

		(var isLastDayLeft:bool = "timeLeft < DAY_IN_SEC")
		(var isDailyFormat:bool = "isLastDayLeft || isPrimeTime")

		(var tooltipDate:str = "formatTime(sseStopTimeStamp, 'dd.MM.yyyy hh:mm', '', true)")
		
		(var isTimeHidden:bool = "timeLeft <= 0 && isPostBattle")
		(var statusText:str = "	isTimeHidden	? 'IDS_SSE_STATUS_FAILED' :
								isDailyFormat	? subst('IDS_SUBST_SSE_TIME_LEFT_LAST_DAY', [], { timeLeft: formattedLastDayLeft })
												: subst('IDS_SUBST_PL_SSE_TIME_LEFT_DAYS', [], { timeLeft: daysCount }, daysCount)")
		(var unifiedStatus:str = "	isTimeHidden	? SC.Ui_styles.UNIFIED_STATUS.NEGATIVE :
									isLastDayLeft	? SC.Ui_styles.UNIFIED_STATUS.DATE_ATTENTION
													: SC.Ui_styles.UNIFIED_STATUS.DATE")
		(var tooltipText:str = "subst('IDS_SUBST_SSE_EXPIRES_AT', [], { expiryDateTime: tooltipDate })")
	)
	(name = 'SseStatusActive')

	(style (width = 100%))
	(controller $Instance renderer='SseStatusOpenEnded'
		(bind enabled "isSseOpenEnded && _isCardSimple")
		(args
			_sseEntity = "_sseEntity"
		)
	)
	(controller $Instance renderer='StatusLine'
		(bind enabled "!(isSseOpenEnded && _isCardSimple)")
		(args
			_unifiedStatus = "unifiedStatus"
			_text = "statusText"
			_width = "100%"
		)
	)
	(controller $Tooltip
		(renderer='SimpleStatusTooltip')
		(args
			_text = "tooltipText"
		)
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)
)

(def element SseStatusFailed ()
	(name = 'SseStatusFailed')
	(style (width = 100%))
	(element StatusLine
		_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.NEGATIVE"
		_text = 'IDS_SSE_STATUS_FAILED'
	)
)

(def element SseStatusDone ()
	(name = 'SseStatusDone')
	(style (width = 100%))
	(element StatusLine
		_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.CHECK"
		_text = 'IDS_SSE_STATUS_COMPLETED'
	)
)

(def element SseStatusRefreshByQty (_sseEntity:gfx)
	(scope
		(var progressMax:number = "_sseEntity.progress.max ?: 0" (event "_sseEntity.progress.evChanged"))
		(var progressCurrent:number = "_sseEntity.progress.value ?: 0" (event "_sseEntity.progress.evChanged"))
		(var taskRepetitionsLeft:number = "progressMax - progressCurrent")
		(var statusTextRepeatable:str = "progressMax > 1	? subst('IDS_SUBST_PL_SSE_REPEAT_NUMBER', [], { repeatNum: taskRepetitionsLeft }, taskRepetitionsLeft)
															: 'IDS_SSE_REPEAT_NUMBER_UNLIMITED'")
	)
	(name = 'SseStatusRefreshByQty')

	(style (width = 100%))
	(element StatusLine
		_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.UPDATE"
		_text = "statusTextRepeatable"
		_width = 100%
	)
)

(def element SseStatusRefreshByTime (_sseEntity:gfx, _isSseMotivator:bool = false)
	(scope
		(macro SERVER_TIME_SCOPE)

		(var refreshTime:number = "_sseEntity.sseRefresh.refreshTime ? _sseEntity.sseRefresh.refreshTime : 0" (event "_sseEntity.sseRefresh.evChanged"))
		(var timeLeft:number = "refreshTime - serverTime")
		(var isDailyFormat:bool = "timeLeft < DAY_IN_SEC")
		(var timeFormat:str = "isDailyFormat ? 'HH:mm:ss' : 'HIGHEST'")
		(macro COUNTDOWN_SCOPE "'timeTillNextRefresh'" "refreshTime" "timeFormat")

		(var weekly:number = "_sseEntity.sseRefresh.weekly" (event "_sseEntity.sseRefresh.evChanged"))
		(var isWeekly:bool = "weekly > 0")

		
		(var isPostBattle:bool = "_sseEntity.hasComponent(CC.sseCorePersistent)" (event "_sseEntity.evAdded") (event "_sseEntity.evRemoved"))
		(var isSseCore:bool = "_sseEntity.hasComponent(CC.sseCore)" (event "_sseEntity.evAdded") (event "_sseEntity.evRemoved"))
		(var isStatusVisible:bool = "isSseCore || isPostBattle && timeLeft > 0")

		(var tooltipDate:str = "formatTime(refreshTime, 'dd.MM.yyyy hh:mm', '', true)")
		(var statusIDS:str = "	_isSseMotivator	? 'IDS_SUBST_SSE_MOTIVATOR_RESET_IN' :
								isWeekly		? 'IDS_SUBST_SSE_WEEKLY_RESET_IN'
												: 'IDS_SUBST_SSE_DAILY_RESET_IN'")
		(var tooltipIDS:str = "isWeekly ? 'IDS_SUBST_SSE_WEEKLY_RESET_IN_TOOLTIP' : 'IDS_SUBST_SSE_DAILY_RESET_IN_TOOLTIP'")
		(var tooltipText:str = "subst(tooltipIDS, [], { timeLeft: tooltipDate })")
		(var statusText:str = "subst(statusIDS, [], { timeLeft: timeTillNextRefresh })")
	)
	(name = 'SseStatusRefreshByTime')
	(style (width = 100%))

	
	(controller $Instance renderer='StatusLine'
		(bind enabled "isStatusVisible")
		(args
			_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.UPDATE"
			_text = "statusText"
			_width = "100%"
		)
	)
	(controller $Tooltip
		(renderer='SimpleStatusTooltip')
		(args
			_text = "tooltipText"
		)
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)
)

(def element SseStatusRewardsReceived ()
	(name = 'SseStatusRewardsReceived')
	(style (width = 100%))
	(element StatusLine
		_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.CHECK"
		_text = 'IDS_SSE_STATUS_PORTAL_REWARDS_RECEIVED'
	)
)

(def element SseStatusResultsCounting ()
	(name = 'SseStatusResultsCounting')
	(style (width = 100%))
	(element StatusLine
		_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.DATE"
		_text = 'IDS_SSE_STATUS_PORTAL_RESULTS_COUNTING'
	)
)

(def element SseStatusOpenEnded (_sseEntity:gfx)
	(scope
		(var taskConditions:array = "_sseEntity.sseTask.conditions ?: []" (event "_sseEntity.sseTask.evChanged"))
		(var sseConditionEntity:gfx = "$datahub.getEntity(taskConditions[0])")
		(var countablesIds:array = "sseConditionEntity.sseConditions.countablesIds ?: []" (event "sseConditionEntity.sseConditions.evConditionSetChanged"))
	)
	(name = 'SseStatusOpenEnded')
	(style (width = 100%) (flow = "horizontal"))
	(tf
		(class $TextDefaultNM)
		(style (marginRight = "S") (alpha = "TA"))
		(text = 'IDS_SSE_PORTAL_RESULT_COLON')
	)
	(tf
		(class $TextDefaultBoldNM)
		(style (alpha = "TA"))
		(bind text "formatSeparator(countablesIds[0].currentProgress)")
	)
)


(def element SseCategoryStatus (_activeChild:str, _selectedCategoryId:str = '', _isShipAces:bool=false, _isSseOpenEndedSelected:bool=false)
	(scope
		(var shipAcesSeasonEntity:gfx = "$datahub.getSingleEntity(CC.shipAcesSeason)")
		(var finishSeasonTime:number = "shipAcesSeasonEntity.shipAcesSeason.finishTime ?: 0" (event "shipAcesSeasonEntity.shipAcesSeason.evChanged"))
		
		(macro SERVER_TIME_SCOPE)
		(macro COUNTDOWN_SCOPE "'formattedSeasonCountDown'" "finishSeasonTime" "'HIGHEST,WITH_DAYS'")

		(var timeLeftSeason:number = "finishSeasonTime - serverTime")
		(var daysUntilShipAcesSeasonFinish:number = "floor(timeLeftSeason / DAY_IN_SEC)") 

		(var battlePassEntity:gfx = "$datahub.getSingleEntity(CC.battlePass)")
		(var finishTime:number = "battlePassEntity.battlePass.finishTime ?: 0" (event "battlePassEntity.battlePass.evChanged"))
		(macro COUNTDOWN_SCOPE "'formattedFinishTime'" "finishTime" "'HIGHEST,WITH_DAYS'")

		(var selectedSseTagEntity:gfx = "$datahub.getPrimaryEntity(CC.sseTag, _selectedCategoryId)")
		(var sseCategoryId:str = "selectedSseTagEntity.sseTag.id" (event "selectedSseTagEntity.sseTag.evChanged"))
		(var sseCategoryStopTimestamp:number = "selectedSseTagEntity.sseTag.stop ?: 0" (event "selectedSseTagEntity.sseTag.evChanged"))
		(var isEndless:bool = "selectedSseTagEntity.sseTag.isEndless" (event "selectedSseTagEntity.sseTag.evChanged"))
		
		(var weekly:number = "selectedSseTagEntity.sseRefresh.weekly" (event "selectedSseTagEntity.sseRefresh.evChanged"))
		(var refreshTime:number = "selectedSseTagEntity.sseRefresh.refreshTime ?: 0" (event "selectedSseTagEntity.sseRefresh.evChanged"))
		(var isWeekly:bool = "weekly > 0")
		(var isBattlePassCategory:bool = "sseCategoryId == SC.Sse.PREDEFINED_SSE_TAGS.BATTLEPASS && _activeChild == 'sse_battlepass'")

		(var timeLeft:number = "sseCategoryStopTimestamp - serverTime")
		(macro COUNTDOWN_SCOPE "'formattedLastDayLeft'" "sseCategoryStopTimestamp" "'HH:mm:ss'")
		(var daysUntilSseFinish:number = "floor(timeLeft / DAY_IN_SEC)")

		(macro COUNTDOWN_SCOPE "'timeTillNextDay'" "refreshTime" "'HH:mm:ss'")
		(macro COUNTDOWN_SCOPE "'refreshTimeStamp'" "refreshTime" "'HIGHEST'")

		(var unifiedStatus:str = "	_isShipAces && !daysUntilShipAcesSeasonFinish	? SC.Ui_styles.UNIFIED_STATUS.DATE_ATTENTION :
									isWeekly										? SC.Ui_styles.UNIFIED_STATUS.UPDATE :
									isBattlePassCategory							? SC.Ui_styles.UNIFIED_STATUS.DATE
																					: SC.Ui_styles.UNIFIED_STATUS.DATE")

		(var statusTextTimeLeft:str = "_isShipAces								? subst('IDS_SUBST_SHIP_ACES_TIME_STATUS_FINISHING_SEASON',	[], { timeLeft: formattedSeasonCountDown }) :
										isWeekly								? subst('IDS_SUBST_SSE_CATEGORY_DAILY_RESET_IN',			[], { timeLeft: refreshTimeStamp }) :
										isBattlePassCategory					? subst('IDS_SUBST_BATTLEPASS_STATUS_TIME',					[], { timeLeft: formattedFinishTime }) :
										isEndless || _isSseOpenEndedSelected	? 'IDS_SUBST_SSE_CATEGORY_TIME_UNTIL_EVENT_END' :
										daysUntilSseFinish >= 1					? subst('IDS_SUBST_PL_SSE_CATEGORY_TIME_LEFT_DAYS',			[], { timeLeft: daysUntilSseFinish }, daysUntilSseFinish) :
										sseCategoryStopTimestamp > 0			? subst('IDS_SUBST_SSE_CATEGORY_TIME_LEFT_LAST_DAY',		[], { timeLeft: formattedLastDayLeft })
																				: ''")
	)
	(controller $Instance renderer='StatusLine'
		(bind enabled "statusTextTimeLeft != ''")
		(args
			_text = "statusTextTimeLeft"
			_unifiedStatus = "unifiedStatus"
		)
	)
)

(def element SseConditions (_conditionId:number)
	(scope
		(var sseConditionEntity:gfx = "$datahub.getEntity(_conditionId)")
		(var battleTypes:array = "sseConditionEntity.battleTypesView.viewList" (event "sseConditionEntity.battleTypesView.evBattleTypesViewChanged"))
		(var hasReducedBattleTypes:bool = "sseConditionEntity.battleTypesView.hasReducedBattleTypes" (event "sseConditionEntity.battleTypesView.evBattleTypesViewChanged"))
		(var isBattleTypeRestrictionBlockVisible:bool = "battleTypes.length > 0")
		(var shipRestrictions:array = "sseConditionEntity.shipListRestrictions.selectedFilters" (event "sseConditionEntity.shipListRestrictions.evUpdate"))
		(var conditionCategory:str = "sseConditionEntity.sseConditions.conditionCategory" (event "sseConditionEntity.sseConditions.evUpdate"))
		(var pveModifier:number = "sseConditionEntity.sseConditions.pveModifier")
		(var isPVEModifierApplied:bool = "pveModifier != PVE_DEFAULT_MODIFIER_COEFF && hasReducedBattleTypes")
		(var isAggregator:bool = "conditionCategory == SC.Sse.SSE_CONDITION_CATEGORY.COMPLETE_TASK")
	)
	(bind visible "!isAggregator")
	(style (marginTop = -5px) (width = 100%))

	(block
		(style (height = 21px))
		(tf
			(class $TextDefaultNM)
			(style (alpha = "TA") (marginTop = 5px))
			(text = 'IDS_SSE_TASK_RESTRICTIONS_COLON')
		)
	)

	(block
		(style (width = 100%) (flow = "tile_horizontal") (marginTop = "XS"))

		(hblock
			(style (marginLeft = -1px))
			(controller $Repeat renderer='TaskBattleTypeRestriction'
				(bind enabled "isBattleTypeRestrictionBlockVisible")
				(bind count "battleTypes.length")
				(args
					_isPVEModifierApplied = "battleTypes[$index].hasPVEModifier && isPVEModifierApplied"
					_battleType = "battleTypes[$index].battleName"
					_customIcon = "battleTypes[$index].customIconName ?: ''"
				)
			)
		)
		
		(block
			(bind visible "shipRestrictions.length > 0 && isBattleTypeRestrictionBlockVisible")
			(style (height = 21px) (marginTop = "XXS") (marginLeft = "XXS") (marginRight = "S"))
			(element VerticalDivider)
		)

		(block
			(style (marginTop = "XXS"))
			(controller $Instance renderer='ShipRestrictions'
				(bind enabled "shipRestrictions.length")
				(args
					_restrictionsEntityId = "sseConditionEntity.id"
				)
			)
		)
	)
)

(def element SseProgress (_sseId:number, _conditionId:number)
	(scope
		(var sseEntity:dhEntity = "getEntity(_sseId)")
		(var sseEpicComponent:dhComponent = "sseEntity.sseEpic" (event "sseEntity.evAdded") (event "sseEntity.evRemoved"))
		(var sseChainComponent:dhComponent = "sseEntity.sseChain" (event "sseEntity.evAdded") (event "sseEntity.evRemoved"))
		(var progressComponent:dhComponent = "sseEntity.progress" (event "sseEntity.evAdded") (event "sseEntity.evRemoved"))
		(var isEpic:bool = "sseEntity && sseEntity.hasComponent(CC.sseEpic)")
		(var isChain:bool = "sseEntity && sseEntity.hasComponent(CC.sseChain)")

		(var epicTasksToComplete:number = "sseEpicComponent.tasksToComplete" (event "sseEpicComponent.evChanged"))
		(var epicBattleProgress:number = "sseEpicComponent.battleProgress" (event "sseEpicComponent.evChanged"))
		(var chainBattleProgress:number = "sseChainComponent.battleProgress" (event "sseChainComponent.evChanged"))
		(var progressCurrent:number = "progressComponent.value" (event "progressComponent.evChanged"))
		(var progressMax:number = "progressComponent.max" (event "progressComponent.evChanged"))

		(var sseConditionEntity:dhEntity = "getEntity(_conditionId)")
		(var countablesIds:array = "sseConditionEntity.sseConditions.countablesIds ?: []" (event "sseConditionEntity.sseConditions.evConditionSetChanged"))

		(var sseProgressCurrent:number = "	isEpic || isChain	? progressCurrent
																: countablesIds[0].currentProgress")
		(var sseProgressBattle:number = "	isEpic	? epicBattleProgress :
											isChain	? chainBattleProgress
													: countablesIds[0].battleProgress")
		(var sseProgressMax:number = "	isEpic		? epicTasksToComplete :
										isChain		? progressMax
													: countablesIds[0].maxProgress")

		(var progressBeforeBattle:number = "(sseProgressCurrent - sseProgressBattle) / sseProgressMax")
		(var progressAfterBattle:number = "sseProgressBattle / sseProgressMax")
	)
	(style (width = 100%))

	(block
		(style (width = 100%) (marginLeft = -1px))
		(controller $Instance renderer='DoubleProgressBar'
			(bind enabled "sseProgressMax > 1")
			(args
				_progress1 = "progressBeforeBattle"
				_color1 = "progressAfterBattle ? SC.Ui_styles.SERVICE_COLORS.ORANGE : SC.Ui_styles.SERVICE_COLORS.YELLOW"
				_progress2 = "progressAfterBattle"
				_color2 = "SC.Ui_styles.SERVICE_COLORS.YELLOW"
			)
		)
	)
	(block
		(bind visible "sseProgressMax > 1")
		(style (marginTop = "XS"))
		(controller $Instance renderer='DefaultDividedCounter'
			(bind enabled "sseProgressMax > 1")
			(args
				_curValueTextClass = '$TextDefaultNM'
				_curValue = "sseProgressCurrent"
				_maxValue = "sseProgressMax"
				_doNotHideOnZeroMaxValue = true
			)
		)
	)
)
