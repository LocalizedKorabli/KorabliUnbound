(def constant SSE_STATUS_MAP	{
	SC.Sse.SSE_STATUSES.LOCKED_BY_PREVIOUS_SSE: 'SseStatusLockedByPrevious',
	SC.Sse.SSE_STATUSES.LOCKED_BY_TIME: 'SseStatusLockedByTime',
	SC.Sse.SSE_STATUSES.LOCKED_BECAUSE_NOT_PRIME_TIME: 'SseStatusLockedByTime',
	SC.Sse.SSE_STATUSES.ACTIVE: 'SseStatusActive',
	SC.Sse.SSE_STATUSES.FAILED: 'SseStatusFailed',
	SC.Sse.SSE_STATUSES.DONE: 'SseStatusDone',
	SC.Sse.SSE_STATUSES.REFRESH_BY_TIME_AVAILABLE: 'SseStatusRefreshByTime',
	SC.Sse.SSE_STATUSES.REFRESH_AVAILABLE: 'SseStatusRefreshByQty',
	SC.Sse.SSE_STATUSES.RESULTS_COUNTING: 'SseStatusResultsCounting',
	SC.Sse.SSE_STATUSES.REWARDS_RECEIVED: 'SseStatusRewardsReceived'
})

(def constant SSE_NAVIGATION_WIDTH 204)
(def constant SSE_DEFAULT_CONTENT_WIDTH 1400)

(def constant BG_COLOR_SSE_CARD "{
	DEFAULT: 0x8004171B,
	HOVER: 0x33758b8b,
	SELECTED: 0x66758b8b
}")

(def constant BG_COLOR_SSE_LINK_LINE 0x66FFFFFF)

(def element SseCommonChild (_isEmptyCategory:bool, _itemsByCategory:dhCollection, _parentLength:number, _entityDetailedId:number, _isEpic:bool, _epicTasks:dhCollection, _isChain:bool, _chainTasks:dhCollection, _activeTaskIndex:number)
	(macro DEFAULT_MODAL_WINDOW_SCOPE_EVENTS)
	(scope
		(event evBroadcastSelectedItemUpwards)
		(event evBroadcastSelectedItemDownwards)
		(event evBroadcastSelectedCategoryDownwards)
		(event evBroadcastSelectedCategoryUpwards)

		(var sseCardsThirdLevel:dhCollection = "_isEpic		?	_epicTasks :
												_isChain	?	_chainTasks
															:	null")

		(var sseCardsThirdLevelLen:number = "sseCardsThirdLevel.length ?: 0")
		(var itemsByCategoryLen:number = "_itemsByCategory.length ?: 0")
	)
	(class $Fullsize)

	(hblock 
		(bind visible "!_isEmptyCategory")
		(class $Fullsize)

		(element DeclareBlurLayer)

		(block
			(macro DEFAULT_MODAL_WINDOW_CACHED_ANIMATION 3)
			(style (height = 100%) (width = { 1280:340px, 1920:456px }))

			(controller $Animation
				(bindcall play
					keyframes = "[
						{ time:0,		to:{ alpha:0, visualOffsetY: 10px }},
						{ time:0.1,		to:{ alpha:0, visualOffsetY: 10px }},
						{ time:0.25,	to:{ alpha:1, visualOffsetY: 0px }, easing:Easing.quad_out}
					]"
					action = "kill"
					(event "evBroadcastSelectedCategoryDownwards")
				)
			)

			(scrollArea
				(class $Fullsize)
				(style (backgroundColor = "NO_COLOR"))

				(hscrollPolicy = 'off')
				(vscrollPolicy = 'auto')
				(verticalSlider = 'ScrollBarVLight')
				
				(topShadow = 'ScrollAreaShadowTop')
				(bottomShadow = 'ScrollAreaShadowBottom')

				(wheelScrollSpeed = 1.0)
				(wheelScrollAcceleration = 0.8)
				(maxScrollingAnimatedDistance = 280)

				(activeControlsAlpha = 1)
				(inactiveControlsAlpha = 0.5)
				(animationDuration = 0.2)
				(animationEasing = "Easing.cubic_out")

				(content
					(style (width = 100%) (paddingRight = "S"))

					(block
						(style (width = 100%))

						(controller $DynamicRepeat renderer='SseCardSimple'
							(bind count "itemsByCategoryLen")
							(args
								_sseCollection = "_itemsByCategory"
							)
							(itemHeight = 78px)
							(itemOffset = 156px)
						)
					)
				)

				(bindcall scrollToDirection vertDir="ScrollDirection.TOP" animated=false (event "evBroadcastSelectedCategoryUpwards"))
			)
		)

		(block
			(class $Fullsize)
			(style (paddingLeft = "{ 1280:M, 1920:L }") (paddingRight = "S"))
			
			(block 
				(macro DEFAULT_MODAL_WINDOW_CACHED_ANIMATION 4)
				(style (width = 100%))

				(controller $Animation
					(bindcall play
						keyframes = "[
							{ time:0,		to:{ alpha:0, visualOffsetY: 10px }},
							{ time:0.2,		to:{ alpha:0, visualOffsetY: 10px }},
							{ time:0.35,	to:{ alpha:1, visualOffsetY: 0px }, easing:Easing.quad_out}
						]"
						action = "kill"
						(event "evBroadcastSelectedItemUpwards")
						(event "evBroadcastSelectedCategoryDownwards")
					)
				)

				(element SseCardDetailed
					_sseEntityId = "_entityDetailedId"
				)
			)

			(block 
				(macro DEFAULT_MODAL_WINDOW_CACHED_ANIMATION 5)
				(class $Fullsize)
				(style (paddingTop = "M"))

				(controller $Animation
					(bindcall play
						keyframes = "[
							{ time:0,		to:{ alpha:0, visualOffsetY: 10px }},
							{ time:0.3,		to:{ alpha:0, visualOffsetY: 10px }},
							{ time:0.45,	to:{ alpha:1, visualOffsetY: 0px }, easing:Easing.quad_out}
						]"
						action = "kill"
						(event "evBroadcastSelectedItemUpwards")
						(event "evBroadcastSelectedCategoryDownwards")
					)
				)

				(scrollArea
					(class $Fullsize)
					(style (backgroundColor = "NO_COLOR"))

					(hscrollPolicy = 'off')
					(vscrollPolicy = 'auto')
					(verticalSlider = 'ScrollBarVLight')
					
					(topShadow = 'ScrollAreaShadowTop')
					(bottomShadow = 'ScrollAreaShadowBottom')

					(wheelScrollSpeed = 1.0)
					(wheelScrollAcceleration = 0.8)
					(maxScrollingAnimatedDistance = 280)

					(activeControlsAlpha = 1)
					(inactiveControlsAlpha = 0.5)
					(animationDuration = 0.2)
					(animationEasing = "Easing.cubic_out")
					(repeatController = 'sseCardThirdLevelContainer')

					(content
						(style (width = 100%))

						(controller $DynamicRepeat renderer='SseCardThirdLevel' name='sseCardThirdLevelContainer'
							(bind count "sseCardsThirdLevelLen")
							(args
								_sseCollection = "sseCardsThirdLevel"
								_parentLength = "_parentLength"
							)
							(itemHeight = 78px)
							(itemOffset = 156px)
						)
					)

					(bindcall scrollTo index="_activeTaskIndex" (bind trigger "_activeTaskIndex"))
					(bindcall scrollTo index="_activeTaskIndex" (event "evBroadcastSelectedItemDownwards") (event "evBroadcastSelectedItemUpwards"))
					(bindcall scrollTo index="_activeTaskIndex" on='addedToStage')
				)
			)
		)
	)

	(block
		(bind visible "_isEmptyCategory")
		(macro DEFAULT_MODAL_WINDOW_CACHED_ANIMATION 3)
		(class $FullsizeAbsolute)
		(style (paddingLeft = "{ 1280:-224px, 1920:-312px }"))

		(controller $Animation
			(bindcall play
				keyframes = "[
					{ time:0,		to:{ alpha:0, visualOffsetY: 10px }},
					{ time:0.1,		to:{ alpha:0, visualOffsetY: 10px }},
					{ time:0.25,	to:{ alpha:1, visualOffsetY: 0px }, easing:Easing.quad_out}
				]"
				action = "kill"
				(event "evBroadcastSelectedCategoryDownwards")
			)
		)

		(controller $Instance renderer='NoItemsComeBackLater'
			(bind enabled "_isEmptyCategory")
			(args
				_type = "COME_BACK_LATER_TYPE.TASKS"
			)
		)
	)
)

(def element SseStatus (_sseId:number = 0, _isCardSimple:bool = false, _hasDivider:bool = false)
	(scope
		(var sseEntity:dhEntity = "getEntity(_sseId)")
		(var sseCorePersistent:dhComponent = "sseEntity.sseCorePersistent")
		(var isPostBattle:bool = "sseCorePersistent != null")
		(var statusesCorePersistent:array = "sseCorePersistent.statuses ?: []" (event "sseCorePersistent.evStatusesChanged"))

		(var statusesCore:array = "sseEntity.sseCore.statuses ?: []" (event "sseEntity.sseCore.evStatusesChanged"))
		(var statuses:array = "isPostBattle ? statusesCorePersistent : statusesCore")
		(var statusesCount:number = "_isCardSimple ? 1 : statuses.length")
	)
	(style (width = 100%))

	(controller $Repeat renderer='SseStatusRender'
		(bind enabled "statuses.length > 0")
		(bind count "statusesCount")
		(args
			_sseEntity = "sseEntity"
			_isCardSimple = "_isCardSimple"
			_statuses = "statuses"
			_hasDivider = "_hasDivider"
		)
	)
)

(def element SseStatusRender (_sseEntity:dhEntity, _statuses:array = [], _isCardSimple:bool = false, _hasDivider:bool = false)
	(scope
		(var sseStatusRender:str = "_isCardSimple			? SSE_STATUS_MAP[_statuses[0]] :
									_statuses.length > 0	? SSE_STATUS_MAP[_statuses[$index]]
															: ''")
		(var isDividerVisible:bool = "_hasDivider && $index > 0")
	)

	(style
		(width = 100%)
		(bind marginTop "isDividerVisible	? MS :
						 $index				? M
											: 0")
	)

	(block
		(style (width = 100%))
		(controller $Instance
			(bind renderer "sseStatusRender")
			(args
				_sseEntity = "_sseEntity"
				_isCardSimple = "_isCardSimple"
			)
		)
	)

	(block
		(bind visible "isDividerVisible")
		(style (position = "absolute") (top = "-MS") (width = 100%))
		(controller $Instance renderer='TooltipSystemHorizontalDivider' (bind enabled "isDividerVisible"))
	)
)

(def element SseStatusLockedByPrevious ()
	(name = 'SseStatusLockedByPrevious')
	(style (width = 100%))
	(element StatusLine
		_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.LOCK"
		_text = 'IDS_SSE_STATUS_LOCKED_PREVIOUSCHAINTASKNOTCOMPLETED'
		_width = 100%
	)
)

(def element SseStatusLockedByTime (_sseEntity:dhEntity)
	(scope
		(macro SERVER_TIME_SCOPE)

		(var isPrimeTime:bool = "_sseEntity.hasComponent(CC.ssePrimeTime)")
		(var primeTimeStart:number = "_sseEntity.ssePrimeTime.startAt ?: 0" (event "_sseEntity.ssePrimeTime.evChanged"))
		(var sseStartTimeStamp:number = "_sseEntity.sseCore.start ?: 0" (event "_sseEntity.sseCore.evChanged"))
		(var sseUnlocksIn:number = "isPrimeTime ? primeTimeStart : sseStartTimeStamp")

		(var timeLeft:number = "sseStartTimeStamp - serverTime")
		(var isLastDayLeft:bool = "timeLeft < DAY_IN_SEC")
		(var isDailyFormat:bool = "isLastDayLeft || isPrimeTime")
		(var timeFormat:str = "isDailyFormat ? 'hh:mm:ss' : 'HIGHESTDAYS'")

		(var tooltipDate:str = "formatTime(sseUnlocksIn, 'dd.MM.yyyy hh:mm', '', true)")
		(macro COUNTDOWN_SCOPE "'epicUnlocksIn'" "sseUnlocksIn" "timeFormat")

		(var statusTextEpicUnlocksIn:str = "subst('IDS_SUBST_SSE_STATUS_LOCKED_NEXTEPICNOTUNLOCKEDYET', [], { unlockTime: epicUnlocksIn })")
		(var tooltipText:str = "subst('IDS_SUBST_SSE_IS_ACTIVATED_AT', [], { activationDateTime: tooltipDate })")
	)
	(name = 'SseStatusLockedByTime')

	(style (width = 100%))
	(element StatusLine
		_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.LOCK"
		_text = "statusTextEpicUnlocksIn"
		_width = 100%
	)
	(controller $Tooltip
		(renderer='SimpleStatusTooltip')
		(args
			_text = "tooltipText"
		)
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)
)

(def element SseStatusActive (_sseEntity:dhEntity, _isCardSimple:bool = false)
	(scope
		(macro SERVER_TIME_SCOPE)

		(var isPrimeTime:bool =		"_sseEntity.hasComponent(CC.ssePrimeTime)")
		(var isPostBattle:bool =	"_sseEntity.hasComponent(CC.sseCorePersistent)")
		(var isSseOpenEnded:bool =	"_sseEntity.hasComponent(CC.sseOpenEnded)")

		(var primeTimeEnd:number = "_sseEntity.ssePrimeTime.endAt ?: 0" (event "_sseEntity.ssePrimeTime.evChanged"))
		(var sseStartTimestamp:number = "_sseEntity.sseCore.start ?: 0" (event "_sseEntity.sseCore.evChanged"))
		(var sseCoreStopTimeStamp:number = "_sseEntity.sseCore.stop ?: 0" (event "_sseEntity.sseCore.evChanged"))
		(var progressFreezeAt:number = "_sseEntity.sseOpenEnded.freezeAt ?: 0" (event "_sseEntity.sseOpenEnded.evChanged"))
		(var ssePostBattleStopTimeStamp:number = "_sseEntity.sseCorePersistent.stop ?: 0")

		(var epicTimeLeftToUnlock:number = "sseStartTimestamp > serverTime ? sseStartTimestamp - serverTime : 0")
		(var sseStopTimeStamp:number = "isPrimeTime		? primeTimeEnd :
										isSseOpenEnded	? progressFreezeAt :
										isPostBattle	? ssePostBattleStopTimeStamp
														: sseCoreStopTimeStamp")
		(var timeLeft:number = "sseStopTimeStamp - serverTime")
		(var daysCount:number = "floor(timeLeft / DAY_IN_SEC) - epicTimeLeftToUnlock")
		(var formattedLastDayLeft:str = "formatTime(timeLeft, 'HH:mm:ss')")

		(var isLastDayLeft:bool = "timeLeft < DAY_IN_SEC")
		(var isDailyFormat:bool = "isLastDayLeft || isPrimeTime")

		(var tooltipDate:str = "formatTime(sseStopTimeStamp, 'dd.MM.yyyy hh:mm', '', true)")
		
		(var isTimeHidden:bool = "timeLeft <= 0 && isPostBattle")
		(var statusText:str = "	isTimeHidden	? 'IDS_SSE_STATUS_FAILED' :
								isDailyFormat	? subst('IDS_SUBST_SSE_TIME_LEFT_LAST_DAY', [], { timeLeft: formattedLastDayLeft })
												: subst('IDS_SUBST_PL_SSE_TIME_LEFT_DAYS', [], { timeLeft: daysCount }, daysCount)")
		(var unifiedStatus:str = "	isTimeHidden	? SC.Ui_styles.UNIFIED_STATUS.NEGATIVE :
									isLastDayLeft	? SC.Ui_styles.UNIFIED_STATUS.DATE_ATTENTION
													: SC.Ui_styles.UNIFIED_STATUS.DATE")
		(var tooltipText:str = "subst('IDS_SUBST_SSE_EXPIRES_AT', [], { expiryDateTime: tooltipDate })")
	)
	(name = 'SseStatusActive')

	(style (width = 100%))
	(controller $Instance renderer='SseStatusOpenEnded'
		(bind enabled "isSseOpenEnded && _isCardSimple")
		(args
			_sseEntity = "_sseEntity"
		)
	)
	(controller $Instance renderer='StatusLine'
		(bind enabled "!(isSseOpenEnded && _isCardSimple)")
		(args
			_unifiedStatus = "unifiedStatus"
			_text = "statusText"
			_width = 100%
		)
	)
	(controller $Tooltip
		(renderer='SimpleStatusTooltip')
		(args
			_text = "tooltipText"
		)
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)
)

(def element SseStatusFailed ()
	(name = 'SseStatusFailed')
	(style (width = 100%))
	(element StatusLine
		_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.NEGATIVE"
		_text = 'IDS_SSE_STATUS_FAILED'
		_width = 100%
	)
)

(def element SseStatusDone ()
	(name = 'SseStatusDone')
	(style (width = 100%))
	(element StatusLine
		_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.CHECK"
		_text = 'IDS_SSE_STATUS_COMPLETED'
		_width = 100%
	)
)

(def element SseStatusRefreshByQty (_sseEntity:dhEntity)
	(scope
		(var progressMax:number = "_sseEntity.progress.max ?: 0" (event "_sseEntity.progress.evChanged"))
		(var progressCurrent:number = "_sseEntity.progress.value ?: 0" (event "_sseEntity.progress.evChanged"))
		(var taskRepetitionsLeft:number = "progressMax - progressCurrent")
		(var statusTextRepeatable:str = "progressMax > 1	? subst('IDS_SUBST_PL_SSE_REPEAT_NUMBER', [], { repeatNum: taskRepetitionsLeft }, taskRepetitionsLeft)
															: 'IDS_SSE_REPEAT_NUMBER_UNLIMITED'")
	)
	(name = 'SseStatusRefreshByQty')

	(style (width = 100%))
	(element StatusLine
		_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.UPDATE"
		_text = "statusTextRepeatable"
		_width = 100%
	)
)

(def element SseStatusRefreshByTime (_sseEntity:dhEntity, _isSseMotivator:bool = false)
	(scope
		(macro SERVER_TIME_SCOPE)

		(var refreshTime:number = "_sseEntity.sseRefresh.refreshTime ?: 0" (event "_sseEntity.sseRefresh.evChanged"))
		(var timeLeft:number = "refreshTime - serverTime")
		(var isDailyFormat:bool = "timeLeft < DAY_IN_SEC")
		(var timeFormat:str = "isDailyFormat ? 'HH:mm:ss' : 'HIGHEST'")
		(macro COUNTDOWN_SCOPE "'timeTillNextRefresh'" "refreshTime" "timeFormat")

		(var weekly:number = "_sseEntity.sseRefresh.weekly" (event "_sseEntity.sseRefresh.evChanged"))
		(var isWeekly:bool = "weekly > 0")

		
		(var isPostBattle:bool = "_sseEntity.hasComponent(CC.sseCorePersistent)")
		(var isSseCore:bool = "_sseEntity.hasComponent(CC.sseCore)")
		(var isStatusVisible:bool = "isSseCore || isPostBattle && timeLeft > 0")

		(var tooltipDate:str = "formatTime(refreshTime, 'dd.MM.yyyy hh:mm', '', true)")
		(var statusIDS:str = "	_isSseMotivator	? 'IDS_SUBST_SSE_MOTIVATOR_RESET_IN' :
								isWeekly		? 'IDS_SUBST_SSE_WEEKLY_RESET_IN'
												: 'IDS_SUBST_SSE_DAILY_RESET_IN'")
		(var tooltipIDS:str = "isWeekly ? 'IDS_SUBST_SSE_WEEKLY_RESET_IN_TOOLTIP' : 'IDS_SUBST_SSE_DAILY_RESET_IN_TOOLTIP'")
		(var tooltipText:str = "subst(tooltipIDS, [], { timeLeft: tooltipDate })")
		(var statusText:str = "subst(statusIDS, [], { timeLeft: timeTillNextRefresh })")
	)
	(name = 'SseStatusRefreshByTime')
	(style (width = 100%))

	
	(controller $Instance renderer='StatusLine'
		(bind enabled "isStatusVisible")
		(args
			_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.UPDATE"
			_text = "statusText"
			_width = 100%
		)
	)
	(controller $Tooltip
		(renderer='SimpleStatusTooltip')
		(args
			_text = "tooltipText"
		)
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)
)

(def element SseStatusRewardsReceived ()
	(name = 'SseStatusRewardsReceived')
	(style (width = 100%))
	(element StatusLine
		_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.CHECK"
		_text = 'IDS_SSE_STATUS_PORTAL_REWARDS_RECEIVED'
		_width = 100%
	)
)

(def element SseStatusResultsCounting ()
	(name = 'SseStatusResultsCounting')
	(style (width = 100%))
	(element StatusLine
		_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.DATE"
		_text = 'IDS_SSE_STATUS_PORTAL_RESULTS_COUNTING'
		_width = 100%
	)
)

(def element SseStatusOpenEnded (_sseEntity:dhEntity)
	(scope
		(var taskConditions:array = "_sseEntity.sseTask.conditions ?: []" (event "_sseEntity.sseTask.evChanged"))
		(var sseConditionEntity:dhEntity = "getEntity(taskConditions[0])")
		(var countablesIds:array = "sseConditionEntity.sseConditions.countablesIds ?: []" (event "sseConditionEntity.sseConditions.evConditionSetChanged"))
		(var currentProgress:str = "countablesIds.length > 0 ? formatSeparator(countablesIds[0].currentProgress) : '0'")
	)
	(name = 'SseStatusOpenEnded')
	(style (width = 100%) (flow = "horizontal"))
	(tf
		(class $TextDefaultNM)
		(style (marginRight = "S") (alpha = "TA"))
		(text = 'IDS_SSE_PORTAL_RESULT_COLON')
	)
	(tf
		(class $TextDefaultBoldNM)
		(style (alpha = "TA"))
		(bind text "currentProgress")
	)
)


(def element SseCategoryStatus ()
	(scope
		(var routeEntity:dhEntity = "getPrimaryEntity(CC.route, SC.Ui_windows.ROUTE.SSE)")
		(var activeChild:str= "routeEntity.route.activeChild" (event "routeEntity.route.evActiveChildChanged"))

		(var shipAcesSeasonEntity:dhEntity = "getSingleEntity(CC.shipAcesSeason)")
		(var finishSeasonTime:number = "shipAcesSeasonEntity.shipAcesSeason.finishTime ?: 0" (event "shipAcesSeasonEntity.shipAcesSeason.evChanged"))
		
		(macro SERVER_TIME_SCOPE)
		(macro COUNTDOWN_SCOPE "'formattedSeasonCountDown'" "finishSeasonTime" "'HIGHEST,WITH_DAYS'")

		(var timeLeftSeason:number = "finishSeasonTime - serverTime")
		(var daysUntilShipAcesSeasonFinish:number = "floor(timeLeftSeason / DAY_IN_SEC)") 

		(var sseWindowStateEntity:dhEntity = "getSingleEntity(CC.sseWindowState)")
		(var selectedCategoryId:str = "sseWindowStateEntity.sseWindowState.selectedTag" (event "sseWindowStateEntity.sseWindowState.evChanged"))

		(var battlePassEntity:dhEntity = "getSingleEntity(CC.battlePass)")
		(var finishTime:number = "battlePassEntity.battlePass.finishTime ?: 0" (event "battlePassEntity.battlePass.evChanged"))
		(macro COUNTDOWN_SCOPE "'formattedFinishTime'" "finishTime" "'HIGHEST,WITH_DAYS'")

		(var selectedSseTagEntity:dhEntity = "getPrimaryEntity(CC.sseTag, selectedCategoryId)")
		(var sseCategoryId:str = "selectedSseTagEntity.sseTag.id" (event "selectedSseTagEntity.sseTag.evChanged"))
		(var sseCategoryStopTimestamp:number = "selectedSseTagEntity.sseTag.stop ?: 0" (event "selectedSseTagEntity.sseTag.evChanged"))
		(var isEndless:bool = "selectedSseTagEntity.sseTag.isEndless" (event "selectedSseTagEntity.sseTag.evChanged"))
		
		(var weekly:number = "selectedSseTagEntity.sseRefresh.weekly" (event "selectedSseTagEntity.sseRefresh.evChanged"))
		(var refreshTime:number = "selectedSseTagEntity.sseRefresh.refreshTime ?: 0" (event "selectedSseTagEntity.sseRefresh.evChanged"))
		(var isWeekly:bool = "weekly > 0")

		(var isBattlePassCategory:bool = "sseCategoryId == SC.Sse.PREDEFINED_SSE_TAGS.BATTLEPASS && activeChild == SC.Ui_windows.ROUTE.SSE_BATTLEPASS")
		(var isSseOpenEndedCategory:bool = "activeChild == SC.Ui_windows.ROUTE.SSE_OPEN_ENDED")
		(var isSseShipAcesCategory:bool = "activeChild == SC.Ui_windows.ROUTE.SSE_SHIP_ACES")

		(var timeLeft:number = "sseCategoryStopTimestamp - serverTime")
		(macro COUNTDOWN_SCOPE "'formattedLastDayLeft'" "sseCategoryStopTimestamp" "'HH:mm:ss'")
		(var daysUntilSseFinish:number = "floor(timeLeft / DAY_IN_SEC)")

		(macro COUNTDOWN_SCOPE "'refreshTimeStamp'" "refreshTime" "'HIGHEST'")

		(var unifiedStatus:str = "	isSseShipAcesCategory && !daysUntilShipAcesSeasonFinish		? SC.Ui_styles.UNIFIED_STATUS.DATE_ATTENTION :
									isWeekly													? SC.Ui_styles.UNIFIED_STATUS.UPDATE :
									isBattlePassCategory										? SC.Ui_styles.UNIFIED_STATUS.DATE
																								: SC.Ui_styles.UNIFIED_STATUS.DATE")

		(var statusTextTimeLeft:str = "	isSseShipAcesCategory					? subst('IDS_SUBST_SHIP_ACES_TIME_STATUS_FINISHING_SEASON',	[], { timeLeft: formattedSeasonCountDown }) :
										isWeekly								? subst('IDS_SUBST_SSE_CATEGORY_DAILY_RESET_IN',			[], { timeLeft: refreshTimeStamp }) :
										isBattlePassCategory					? subst('IDS_SUBST_BATTLEPASS_STATUS_TIME',					[], { timeLeft: formattedFinishTime }) :
										isEndless || isSseOpenEndedCategory		? 'IDS_SUBST_SSE_CATEGORY_TIME_UNTIL_EVENT_END' :
										daysUntilSseFinish >= 1					? subst('IDS_SUBST_PL_SSE_CATEGORY_TIME_LEFT_DAYS',			[], { timeLeft: daysUntilSseFinish }, daysUntilSseFinish)
																				: subst('IDS_SUBST_SSE_CATEGORY_TIME_LEFT_LAST_DAY',		[], { timeLeft: formattedLastDayLeft })")
	)

	(element StatusLine
		_text = "statusTextTimeLeft"
		_unifiedStatus = "unifiedStatus"
	)
)

(def element NewbieQuestsCategoryStatus ()
	(scope
		(var newbieQuestsExpireTimerEntity:dhEntity = "getSingleEntity(CC.newbieQuestsExpireTimer)")
		(var newbieQuestsExpireTimer:number = "newbieQuestsExpireTimerEntity.newbieQuestsExpireTimer.expire ?: 0")

		(macro SERVER_TIME_SCOPE)
		(var timeLeft:number = "newbieQuestsExpireTimer - serverTime")

		(macro COUNTDOWN_SCOPE "'NQFormattedLastDayLeft'" "newbieQuestsExpireTimer" "'HH:mm:ss'")

		(var daysUntilNQFinish:number = "floor(timeLeft / DAY_IN_SEC)")

		(var statusText:str = "daysUntilNQFinish ? 'IDS_SUBST_PL_NEWBIE_QUESTS_TIME_LEFT_DAYS' : 'IDS_SUBST_NEWBIE_QUESTS_TIME_LEFT_LAST_DAY'")
		(var actualTimeLeft:number = "daysUntilNQFinish  ? daysUntilNQFinish : NQFormattedLastDayLeft")
	
		(var statusTextTimeLeft:str = "subst( statusText, [], { timeLeft: actualTimeLeft }, daysUntilNQFinish)")
	)

	(element StatusLine
		_text = "statusTextTimeLeft"
		_unifiedStatus = "SC.Ui_styles.UNIFIED_STATUS.DATE"
	)
)

(def element SseConditions (_conditionId:number)
	(scope
		(var sseConditionEntity:dhEntity = "getEntity(_conditionId)")
		(var battleTypes:array = "sseConditionEntity.battleTypesView.viewList" (event "sseConditionEntity.battleTypesView.evBattleTypesViewChanged"))
		(var hasReducedBattleTypes:bool = "sseConditionEntity.battleTypesView.hasReducedBattleTypes" (event "sseConditionEntity.battleTypesView.evBattleTypesViewChanged"))
		(var isBattleTypeRestrictionBlockVisible:bool = "battleTypes.length > 0")
		(var shipRestrictions:array = "sseConditionEntity.shipListRestrictions.selectedFilters" (event "sseConditionEntity.shipListRestrictions.evUpdate"))
		(var conditionCategory:str = "sseConditionEntity.sseConditions.conditionCategory" (event "sseConditionEntity.sseConditions.evUpdate"))
		(var pveModifier:number = "sseConditionEntity.sseConditions.pveModifier")
		(var isPVEModifierApplied:bool = "pveModifier != PVE_DEFAULT_MODIFIER_COEFF && hasReducedBattleTypes")
		(var isAggregator:bool = "conditionCategory == SC.Sse.SSE_CONDITION_CATEGORY.COMPLETE_TASK")
	)
	(bind visible "!isAggregator")
	(style (marginTop = -5px) (width = 100%))

	(tf
		(class $TextDefaultNM)
		(style (height = 21px) (alpha = "TA") (marginTop = 5px))
		(text = 'IDS_SSE_TASK_RESTRICTIONS_COLON')
	)

	(block
		(style (width = 100%) (flow = "tile_horizontal") (marginTop = "SXS"))

		(hblock
			(style (marginLeft = -1px))
			(controller $Repeat renderer='TaskBattleTypeRestriction'
				(bind enabled "isBattleTypeRestrictionBlockVisible")
				(bind count "battleTypes.length")
				(args
					_isPVEModifierApplied = "battleTypes[$index].hasPVEModifier && isPVEModifierApplied"
					_battleType = "battleTypes[$index].battleName"
					_customIcon = "battleTypes[$index].customIconName ? battleTypes[$index].customIconName : ''"
					_isTrial = "battleTypes[$index].customIconName == SC.Common.OPERATION_BATTLE_TYPE.VALUE_TO_NAME[SC.Common.OPERATION_BATTLE_TYPE.TRIAL]"
				)
			)
		)
		
		(block
			(bind visible "shipRestrictions.length > 0 && isBattleTypeRestrictionBlockVisible")
			(style (height = 21px) (marginTop = "XXS") (marginLeft = "XXS") (marginRight = "S"))
			(element VerticalDivider)
		)

		(block
			(style (marginTop = "XXS"))
			(controller $Instance renderer='ShipRestrictions'
				(bind enabled "shipRestrictions.length")
				(args
					_restrictionsEntityId = "sseConditionEntity.id"
				)
			)
		)
	)
)

(def element SseCardContentCommon (_sseEntityId:number, _sseConditionEntityId:number, _isDetails:bool=false)
	(scope
		(var sseEntity:dhEntity = "getEntity(_sseEntityId)")
		(var sseTaskComponent:dhComponent =				"sseEntity.sseTask")
		(var sseOpenEndedComponent:dhComponent =		"sseEntity.sseOpenEnded")
		(var sseCorePersistentComponent:dhComponent =	"sseEntity.sseCorePersistent")
		(var sseCoreComponent:dhComponent =				"sseEntity.sseCore")

		(struct sseTaskStatusFlags = SSE_TASKS_STATUS_FLAGS (	_sseOpenEnded =			"sseOpenEndedComponent"
																_sseCorePersistent =	"sseCorePersistentComponent"
																_sseCore =				"sseCoreComponent"))

		(var sseConditionEntity:dhEntity = "getEntity(_sseConditionEntityId)")
		(var countablesIds:array = "sseConditionEntity.sseConditions.countablesIds ?: []" (event "sseConditionEntity.sseConditions.evConditionSetChanged"))
		(var taskConditions:array = "sseTaskComponent.conditions" (event "sseTaskComponent.evChanged"))

		(var isSseOpenEnded:bool = "sseOpenEndedComponent != null")
		(var isChainTask:bool = "sseTaskComponent.chainId != null")
		(var isOrTask:bool = "taskConditions.length > 1")
		(var contentIndex:number = "$index")
	)
	(style (width = 100%))

	(hblock
		(bind visible "contentIndex > 0")
		(style
			(width = 100%)
			(paddingLeft = -21px)
			(paddingRight = -15px)
			(marginTop = "M")
			(marginBottom = "M")
			(align = "middle")
		)

		(block
			(style (width = 50%))
			(controller $Instance renderer='DottedHorizontalDivider' (bind enabled "contentIndex > 0"))
		)

		(block
			(style
				(paddingLeft = "S")
				(paddingRight = "S")
			)

			(tf
				(class $TextDefaultNM)
				(style (alpha = "TC"))
				(bind text "toUpper(tr('IDS_OR'))")
			)
		)

		(block
			(style (width = 50%))
			(controller $Instance renderer='DottedHorizontalDivider' (bind enabled "contentIndex > 0"))
		)
	)

	(block
		(style (width = 100%))

		(element SseTaskDescription
			_sseEntityId = "_sseEntityId"
			_conditionId =	"_sseConditionEntityId		? _sseConditionEntityId :
							isOrTask					? null
														: taskConditions[0]"
			_isDetails = "_isDetails"
		)
	)

	(block
		(style (width = 100%) (bind marginTop "isSseOpenEnded ? M : 0px"))

		(controller $Instance renderer='ProgressParamsElement'
			(bind enabled "isSseOpenEnded")
			(args
				_text = 'IDS_SSE_PORTAL_RESULT_COLON'
				_param_1 = "sseTaskStatusFlags.isPostBattle ? countablesIds[0].battleProgress : null"
				_param_2 = "countablesIds[0].currentProgress"
			)
		)
	)

	(block
		(bind visible "isSseOpenEnded")
		(style (width = 100%) (paddingLeft = "-MS") (paddingRight = "-M") (marginTop = "M"))
		(element HorizontalDividerTwoPx)
	)

	(block
		(bind visible "!(sseTaskStatusFlags.isInactive || isSseOpenEnded)")
		(style (marginTop = "M") (width = 100%))

		(controller $Instance renderer='SseProgress'
			(bind enabled "!(sseTaskStatusFlags.isInactive || isSseOpenEnded)")
			(args
				_sseEntityId = "_sseEntityId"
				_conditionId = "_sseConditionEntityId ?: taskConditions[0]"
			)
		)
	)

	(block
		(style (width = 100%) (paddingLeft = "-MS") (paddingRight = "-M") (marginTop = "M"))
		(element HorizontalDividerTwoPx)
	)

	(block
		(bind visible "!(isOrTask && isChainTask)")
		(style (marginTop = "M") (width = 100%))

		(controller $Instance renderer='SseConditions'
			(bind enabled "!(isOrTask && isChainTask)")
			(args
				_conditionId = "taskConditions[contentIndex]"
			)
		)
	)
)

(def element SseTypeIcon (_sseEntityId:number, _isBig:bool = false, _isPostBattle:bool = false)
	(scope
		(var sseEntity:dhEntity = "getEntity(_sseEntityId)")
		(var sseTaskComponent:dhComponent =		"sseEntity.sseTask")
		(var progressComponent:dhComponent =	"sseEntity.progress")

		(var progressMax:number = "progressComponent.max" (event "progressComponent.evChanged") (event "progressComponent.evMaxChanged"))
		(var taskConditions:array = "sseTaskComponent.conditions" (event "sseTaskComponent.evChanged"))
	
		(var sseConditionEntity:dhEntity = "getEntity(taskConditions.length == 1 ? taskConditions[0] : -1)")
		(var conditionCategory:str = "sseConditionEntity.sseConditions.conditionCategory" (event "sseConditionEntity.sseConditions.evUpdate"))

		(var isGlobalSse:bool =		"sseEntity.hasComponent(CC.sseGlobal)")
		(var isEpic:bool =			"sseEntity.hasComponent(CC.sseEpic)")
		(var isChainParent:bool =	"sseEntity.hasComponent(CC.sseChain)")

		(var isChainTask:bool = "sseTaskComponent.chainId != null")
		(var isGlobal:bool = "isGlobalSse && isChainParent || isGlobalSse && !isChainTask")
		(var isOrTask:bool = "sseTaskComponent.conditions.length > 1")
		(var isRepeatableTask:bool = "!isEpic && !isChainParent && (progressMax > 1 || progressMax == 0)")
		(var isAggregator:bool = "conditionCategory == SC.Sse.SSE_CONDITION_CATEGORY.COMPLETE_TASK")
		(var type:str = "	isEpic				? 'epic' :
							isGlobal			? 'global' :
							isAggregator		? 'aggregator' :
							isChainParent		? 'chain' :
							isRepeatableTask	? 'task_repeatable' :
							isOrTask			? 'task_or'
												: 'task'")
	)
	(style
		(bind width "_isBig ? 32px : 24px")
		(bind height "_isBig ? 32px : 24px")
		(bind backgroundImage "'url:../sse/type_icons/sse_type_' + type + (_isBig ? '_32' : '_24') + '.png'")
	)

	(controller $Tooltip
		(bind enabled "!_isPostBattle")
		(renderer = 'SimpleStatusTooltip')
		(args
			_text = "tr('IDS_SSE_ICON_HINT_' + type)"
		)
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)
)

(def element SseTaskDescription (_sseEntityId:number, _conditionId:number, _indexNumber:number, _isHeader:bool, _isThirdLevel:bool, _isDetails:bool)
	(scope
		(var sseEntity:dhEntity = "getEntity(_sseEntityId)")
		(var sseOpenEndedComponent:dhComponent =		"sseEntity.sseOpenEnded")
		(var sseChainComponent:dhComponent =			"sseEntity.sseChain")
		(var sseEpicComponent:dhComponent =				"sseEntity.sseEpic")
		(var sseTaskComponent:dhComponent =				"sseEntity.sseTask")
		(var sseCoreComponent:dhComponent =				"sseEntity.sseCore")
		(var progressComponent:dhComponent =			"sseEntity.progress")
		(var sseCorePersistentComponent:dhComponent =	"sseEntity.sseCorePersistent")

		(struct sseTaskStatusFlags = SSE_TASKS_STATUS_FLAGS (	_sseOpenEnded =			"sseOpenEndedComponent"
																_sseCorePersistent =	"sseCorePersistentComponent"
																_sseCore =				"sseCoreComponent"))

		(var progressMax:number = "progressComponent.max ?: 0" (event "progressComponent.evChanged") (event "progressComponent.evMaxChanged"))
		(var taskConditions:array = "sseTaskComponent.conditions ?: []" (event "sseTaskComponent.evChanged"))

		(var isGlobalSse:bool = "sseEntity.hasComponent(CC.sseGlobal)")

		(var sseConditionEntity:dhEntity = "getEntity(_conditionId ?: sseTaskComponent.conditions[0])")
		(var countablesIds:array = "sseConditionEntity.sseConditions.countablesIds ?: []" (event "sseConditionEntity.sseConditions.evConditionSetChanged"))
		(var taskCategory:str = "sseConditionEntity.sseConditions.conditionCategory")

		(var isEpic:bool =			"sseEpicComponent != null")
		(var isChain:bool =			"sseChainComponent != null")
		(var isSseOpenEnded:bool =	"sseOpenEndedComponent != null")
		(var isOrTask:bool =		"taskConditions.length > 1")

		(var sseName:str = "isEpic		? sseEpicComponent.name :
							isChain		? sseChainComponent.name
										: sseTaskComponent.name")

		(var isGlobalSseDone:bool = "isGlobalSse && sseTaskStatusFlags.isFailed && _isHeader && !_isThirdLevel")
		(var isSseOpenEndedDone:bool = "isSseOpenEnded && sseTaskStatusFlags.isRewarded && _isHeader")
		(var isStatusDone:bool = "isGlobalSseDone || isSseOpenEndedDone || (!isSseOpenEnded && sseTaskStatusFlags.isDone && _isHeader && !_isThirdLevel)")

		(var maxTasks:number = "isEpic	? (sseEpicComponent.tasksToComplete ?: 0)
										: progressMax")
		(var sseTaskDescriptionBase:str = "!_isHeader			?	isEpic			? 'IDS_SSE_COMPLETE_TASKS_IN_EPIC' :
																	isChain			? 'IDS_SSE_COMPLETE_TASKS_IN_CHAIN' :
																	isSseOpenEnded	? 'IDS_SSE_CONDITION_CATEGORY_DESCRIPTION_' + taskCategory + '_FULL'
																					: countablesIds[0].ids :
											_isThirdLevel		?	isOrTask	? 'IDS_SSE_COMPLETE_ANY_TASK'
																				: countablesIds[0].ids :
											sseName.length		? sseName :
											isOrTask			? 'IDS_SSE_COMPLETE_ANY_TASK' :
											isEpic || isChain	? subst('IDS_PL_SSE_COMPLETE_TASKS', [], { count: maxTasks }, maxTasks)
																: 'IDS_TASK'")

		(var sseTaskDescription:str = "sseTaskDescriptionBase	? (_indexNumber > 0 ? _indexNumber + '. ' : '' ) + tr(sseTaskDescriptionBase)
																	: ''") 
		(var achievements:array = "countablesIds[0].achievements ?: []")		
	)
	(style (width = 100%))

	(tf
		(bind class "_isHeader 	?	_isDetails					? '$TextDefaultBold21NM' :
									_isThirdLevel && !isOrTask	? '$TextDefault17NM'
																: '$TextDefaultBold17NM'
								: '$TextDefault17NM'")
		(style
			(width = 100%)
			(bind textColor "isStatusDone	? SC.Ui_styles.SERVICE_COLORS.YELLOW
											: SC.Ui_styles.SERVICE_COLORS.WHITE")
			(bind alpha "_isHeader ? TA : TC")
		)
		(bind text "sseTaskDescription")
	)

	(block
		(bind visible "(_isDetails && !_isHeader || _isThirdLevel) && achievements")
		(style (flow = "tile_horizontal") (width = 100%) (marginTop = "S") (vgap = "S"))
	
		(controller $Repeat renderer='AchievementItem'
			(bind count "achievements.length")
			(args
				_achievementEntityId = "achievements[$index].id"
				_achievementsLen = "achievements.length"
			)
		)
	)
)

(def element AchievementItem (_achievementEntityId:number, _achievementsLen:number, _isPostBattle:bool = false)
	(scope
		(var achievementEntity:dhEntity = "getPrimaryEntity(CC.achievement, _achievementEntityId)")
		(var isCommaVisible:bool = "$index != _achievementsLen - 1")
	)
	(style (flow = "horizontal") (backgroundColor = "NO_COLOR") (marginBottom = "S"))

	(controller $Tooltip
		(bind enabled "!_isPostBattle")
		(renderer = 'AchievementTooltip')
		(args
			_id = "achievementEntity.id"
			_amount = -1
		)
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)

	(tf
		(bind class "_isPostBattle ? '$TextDefaultNM' : '$TextDefault17NM'")
		(style (alpha = "TA"))
		(bind text "tr('IDS_LEFT_QUOTE') + tr(achievementEntity.achievementInfo.nameIDS) + tr('IDS_RIGHT_QUOTE')")
	)

	(tf
		(bind visible "isCommaVisible")
		(bind class "_isPostBattle ? '$TextDefaultNM' : '$TextDefault17NM'")
		(style (marginLeft = "XXS") (marginRight = "S") (alpha = "TC"))
		(text = 'IDS_KEY_COMMA')
	)

	(block
		(style
			(width = 100%)
			(position = "absolute")
			(bottom = "-XS")
			(bind marginRight "isCommaVisible ? '10px' : 0")
		)
		(element DottedLine)
	)
)

(def element SseProgress (_sseEntityId:number, _conditionId:number)
	(scope
		(var sseEntity:dhEntity = "getEntity(_sseEntityId)")
		(var sseEpicComponent:dhComponent =		"sseEntity.sseEpic")
		(var sseChainComponent:dhComponent =	"sseEntity.sseChain")
		(var progressComponent:dhComponent =	"sseEntity.progress")

		(var epicTasksToComplete:number = "sseEpicComponent.tasksToComplete" (event "sseEpicComponent.evChanged"))
		(var epicBattleProgress:number = "sseEpicComponent.battleProgress" (event "sseEpicComponent.evChanged"))
		(var chainBattleProgress:number = "sseChainComponent.battleProgress" (event "sseChainComponent.evChanged"))

		(var progressCurrent:number = "progressComponent.value" (event "progressComponent.evChanged"))
		(var progressMax:number = "progressComponent.max" (event "progressComponent.evChanged"))

		(var sseConditionEntity:dhEntity = "getEntity(_conditionId)")
		(var countablesIds:array = "sseConditionEntity.sseConditions.countablesIds ?: []" (event "sseConditionEntity.sseConditions.evConditionSetChanged"))

		(var isEpic:bool = "sseEpicComponent != null")
		(var isChain:bool = "sseChainComponent != null")

		
		(var sseProgressCurrent:number = "	(isEpic || isChain)	? progressCurrent
																: countablesIds[0].currentProgress")

		(var sseProgressBattle:number = "	isEpic	? epicBattleProgress :
											isChain	? chainBattleProgress
													: countablesIds[0].battleProgress")

		(var sseProgressMax:number = "	isEpic		? epicTasksToComplete :
										isChain		? progressMax
													: countablesIds[0].maxProgress")

		(var progressBeforeBattle:number = "sseProgressMax ? (sseProgressCurrent - sseProgressBattle) / sseProgressMax : 0")
		(var progressAfterBattle:number = "sseProgressMax ? sseProgressBattle / sseProgressMax : 0")

		(var isSseProgressEnabled:bool = "sseProgressMax > 1")
	)
	(style (width = 100%))

	(block
		(style (bind marginTop "isSseProgressEnabled ? 6px : 0px") (width = 100%))

		(controller $Instance renderer='DoubleProgressBar'
			(bind enabled "isSseProgressEnabled")
			(args
				_progress1 =	"progressBeforeBattle"
				_color1 =		"progressAfterBattle ? SC.Ui_styles.SERVICE_COLORS.ORANGE : SC.Ui_styles.SERVICE_COLORS.YELLOW"
				_progress2 =	"progressAfterBattle"
				_color2 =		"SC.Ui_styles.SERVICE_COLORS.YELLOW"
			)
		)
	)

	(block
		(bind visible "isSseProgressEnabled")
		(style (marginTop = "XS"))

		(controller $Instance renderer='DefaultDividedCounter'
			(bind enabled "isSseProgressEnabled")
			(args
				_curValueTextClass = '$TextDefaultNM'
				_curValue = "sseProgressCurrent"
				_maxValue = "sseProgressMax"
				_doNotHideOnZeroMaxValue = true
			)
		)
	)
)

(def element ProgressParamsElement (_text:str, _width:number = auto, _param_1:number = null, _param_2:number = null)  
	(style (width = 100%) (flow = "horizontal") (align = "middle"))

	(tf
		(class $TextDefaultNM)
		(style (bind width "_width") (marginRight = "XS") (alpha = "TA"))
		(bind text "_text")
	)

	(tf
		(bind visible "_param_1")
		(class $TextDefaultNM)
		(style (alpha = "TA"))
		(bind text "'( '")
	)

	(tf
		(bind visible "_param_1")
		(class $TextDefaultNM)
		(class $FontColorGreen)
		(bind text "'+' + formatSeparator(_param_1 ?: 0)")
	)

	(tf
		(bind visible "_param_1")
		(class $TextDefaultBoldNM)
		(style (alpha = "TA"))
		(bind text "' )'")
	)

	(tf
		(class $TextDefaultNM)
		(style (marginLeft = "XS"))
		(bind text "formatSeparator(_param_2 ?: 0)")
	)
)

(def element SseRewardCategory (_sseEntityId:number)
	(scope
		(var sseEntity:dhEntity = "getEntity(_sseEntityId)")
		(var sseOpenEndedComponent:dhComponent =		"sseEntity.sseOpenEnded")
		(var sseCorePersistentComponent:dhComponent =	"sseEntity.sseCorePersistent")
		(var sseChainComponent:dhComponent =			"sseEntity.sseChain")
		(var sseEpicComponent:dhComponent =				"sseEntity.sseEpic")
		(var sseTaskComponent:dhComponent =				"sseEntity.sseTask")
		(var sseCoreComponent:dhComponent =				"sseEntity.sseCore")
		(var sseGlobalComponent:dhComponent =			"sseEntity.sseGlobal")

		(var isManualRewardClaim:bool = "sseChainComponent.claimRewards || sseEpicComponent.claimRewards || sseTaskComponent.claimRewards")
		(struct sseTaskStatusFlags = SSE_TASKS_STATUS_FLAGS(_sseOpenEnded =			"sseOpenEndedComponent"
															_sseCorePersistent =	"sseCorePersistentComponent"
															_sseCore =				"sseCoreComponent"
															_sseGlobal =			"sseGlobalComponent"
															_isManualRewardClaim =	"isManualRewardClaim" ))

		(var rewardCategorySseEpic:str =	"sseEpicComponent.rewardCategory"	(event "sseEpicComponent.evChanged"))
		(var rewardCategorySseChain:str =	"sseChainComponent.rewardCategory"	(event "sseChainComponent.evChanged"))
		(var rewardCategorySseTask:str =	"sseTaskComponent.rewardCategory"	(event "sseTaskComponent.evChanged"))

		(var isClaimRewardAvailable:bool = "sseTaskStatusFlags.isDone && !sseTaskStatusFlags.isClaimed && !sseTaskStatusFlags.isNotParticipatedInGlobalSse")

		(var rewardCategory:str = "	isManualRewardClaim		? 'choice' + (isClaimRewardAvailable ? '_claim' : '') :
									rewardCategorySseEpic	? rewardCategorySseEpic :
									rewardCategorySseChain	? rewardCategorySseChain
															: rewardCategorySseTask")
	)

	(controller $Tooltip
		(renderer='SseRewardTooltip')
		(args
			_sseEntityId = "_sseEntityId"
		)
		(macro DEFAULT_TOOLTIP_BEHAVIOUR)
	)

	(controller $Instance renderer='RewardCategory'
		(bind enabled "rewardCategory")
		(args
			_rewardCategory = "rewardCategory"
			_isReceived = "sseTaskStatusFlags.isReceived"
			_isUnavailable = "sseTaskStatusFlags.isNotParticipatedInGlobalSse"
			_isRewardActive = "isManualRewardClaim && isClaimRewardAvailable"
		)
	)
)

(def element SseRewards (_sseEntityId:number, _isFinal:bool = false)
	(scope
		(var sseEntity:dhEntity = "getEntity(_sseEntityId)")
		(var sseEpicComponent:dhComponent =				"sseEntity.sseEpic")
		(var sseChainComponent:dhComponent =			"sseEntity.sseChain")
		(var sseTaskComponent:dhComponent =				"sseEntity.sseTask")
		(var sseOpenEndedComponent:dhComponent =		"sseEntity.sseOpenEnded")
		(var sseCorePersistentComponent:dhComponent =	"sseEntity.sseCorePersistent")
		(var sseCoreComponent:dhComponent =				"sseEntity.sseCore")
		(var sseGlobalComponent:dhComponent =			"sseEntity.sseGlobal")

		(var isGlobalSse:bool = "sseEpicComponent != null")
		(var isSseOpenEnded:bool = "sseOpenEndedComponent != null")
		(var isManualRewardClaim:bool = "sseChainComponent.claimRewards || sseEpicComponent.claimRewards || sseTaskComponent.claimRewards")

		(var sseEpicRewards:array =		"sseEpicComponent.rewards"	(event "sseEpicComponent.evChanged"))
		(var sseChainRewards:array =	"sseChainComponent.rewards"	(event "sseChainComponent.evChanged"))
		(var sseTaskRewards:array =		"sseTaskComponent.rewards"	(event "sseTaskComponent.evChanged"))
	
		(var rewards:array = "	sseEpicRewards.length	? sseEpicRewards :
								sseChainRewards.length	? sseChainRewards
														: sseTaskRewards")

		(struct sseTaskStatusFlags = SSE_TASKS_STATUS_FLAGS (	_sseOpenEnded =			"sseOpenEndedComponent"
																_sseCorePersistent =	"sseCorePersistentComponent"
																_sseCore =				"sseCoreComponent"
																_sseGlobal =			"sseGlobalComponent"
																_isManualRewardClaim =	"isManualRewardClaim"))

		(var isFinal:bool = "_isFinal || isSseOpenEnded || isGlobalSse")
	)
	(bind name "'sse_reward_' + sseCoreComponent.id")
	(style (width = 100%))
	(tf
		(class $TextDefaultNM)
		(style
			(bind textColor "sseTaskStatusFlags.isReceived ? SC.Ui_styles.SERVICE_COLORS.YELLOW : SC.Ui_styles.SERVICE_COLORS.WHITE")
			(bind alpha "sseTaskStatusFlags.isReceived ? 1 : TC")
		)

		(bind text "sseTaskStatusFlags.isReceived	? 'IDS_SSE_REWARD_RECEIVED_COLON' :
					isManualRewardClaim				? 'IDS_SSE_STATUS_CLAIM_AVAILABLE_COLON' :
					isFinal							? 'IDS_SSE_FINAL_REWARD_COLON'
													: 'IDS_SSE_TASK_REWARD_COLON'")
	)
	(block
		(style (flow = "tile_horizontal") (width = 100%) (marginTop = "S"))

		(controller $Repeat renderer='SseRewardsClaimWrapper'
			(bind count "rewards.length")
			(args
				_sseEntityId = "_sseEntityId"
				_rewardEntityId = "rewards[$index]"
			)
		)
	)
)

(def element SseRewardsClaimWrapper (_sseEntityId:number, _rewardEntityId:number, _selectedRewardIndex:number = null, _isInClaimWindow:bool = false)
	(scope
		(macro SIMPLE_MOUSE_OVER_DOWN_SELECTED_COLORTRANSFORM_SCOPE)
		(var isSelected:bool = "_selectedRewardIndex == $index")

		(var sseEntity:dhEntity = "getEntity(_sseEntityId)")
		(var sseEpicComponent:dhComponent =				"sseEntity.sseEpic")
		(var sseChainComponent:dhComponent =			"sseEntity.sseChain")
		(var sseTaskComponent:dhComponent =				"sseEntity.sseTask")
		(var sseOpenEndedComponent:dhComponent =		"sseEntity.sseOpenEnded")
		(var sseCorePersistentComponent:dhComponent =	"sseEntity.sseCorePersistent")
		(var sseCoreComponent:dhComponent =				"sseEntity.sseCore")
		(var sseGlobalComponent:dhComponent = 			"sseEntity.sseGlobal")

		(var isManualRewardClaim:bool = "sseChainComponent.claimRewards || sseEpicComponent.claimRewards || sseTaskComponent.claimRewards")

		(struct sseTaskStatusFlags = SSE_TASKS_STATUS_FLAGS (	_sseOpenEnded =			"sseOpenEndedComponent"
																_sseCorePersistent =	"sseCorePersistentComponent"
																_sseCore =				"sseCoreComponent"
																_sseGlobal = 			"sseGlobalComponent"
																_isManualRewardClaim =	"isManualRewardClaim"))
	)
	(dispatch "'evBroadcastSelectedRewardIndex'" args="{ selectedRewardIndex: $index }" dir="EventDirection.UP" on='leftClick')

	(style (flow = "horizontal"))

	(block
		(bind visible "isManualRewardClaim && $index")
		(style
			(height = 100%)
			(align = "center|middle")
			(paddingLeft = "S")
			(paddingRight = "M")
			(hitTest = false)
		)
		(tf
			(class $TextDefaultNM)
			(style (alpha = "TC"))
			(text = 'IDS_OR')
		)
	)
	(block
		(macro MOUSE_OVER_DOWN_COLORTRANSFORM _isActive="_isInClaimWindow" _isSelected="isSelected")
		(style (backgroundColor = "NO_COLOR"))
		
		(block
			(bind visible "isSelected")
			(class $FullsizeAbsolute)
			(style (paddingBottom = "-S"))

			(block
				(class $Fullsize)
				(style
					(backgroundImage = 'url:../service_kit/frames/one_pixel_frame.png')
					(scale9grid = 2)
					(hitTest = false)
				)
			)
		)

		(block
			(element RewardItemAdapter
				_entityId = "_rewardEntityId"
				_isUnavailable = "sseTaskStatusFlags.isInactive && !sseTaskStatusFlags.isReceived"
				_isReceived = "sseTaskStatusFlags.isReceived"
			)
		)
	)
)

(def element SseRewardTooltip (_sseEntityId:number)
	(scope
		(var sseEntity:dhEntity = "getEntity(_sseEntityId)")
		(var sseEpicComponent:dhComponent =		"sseEntity.sseEpic")
		(var sseChainComponent:dhComponent =	"sseEntity.sseChain")
		(var sseTaskComponent:dhComponent =		"sseEntity.sseTask")

		(var sseGlobalComponent:dhComponent =			"sseEntity.sseGlobal")
		(var sseOpenEndedComponent:dhComponent =		"sseEntity.sseOpenEnded")
		(var sseCorePersistentComponent:dhComponent =	"sseEntity.sseCorePersistent")
		(var sseCoreComponent:dhComponent =				"sseEntity.sseCore")

		(var sseEpicRewards:array =		"sseEpicComponent.rewards	?: []" (event "sseEpicComponent.evChanged"))
		(var sseChainRewards:array =	"sseChainComponent.rewards	?: []" (event "sseChainComponent.evChanged"))
		(var sseTaskRewards:array =		"sseTaskComponent.rewards	?: []" (event "sseTaskComponent.evChanged"))

		(var rewards:array = "	sseEpicRewards.length	? sseEpicRewards :
								sseChainRewards.length	? sseChainRewards
														: sseTaskRewards")
		(var isManualRewardClaim:bool = "sseChainComponent.claimRewards || sseEpicComponent.claimRewards || sseTaskComponent.claimRewards")

		(struct sseTaskStatusFlags = SSE_TASKS_STATUS_FLAGS (	_sseOpenEnded =			"sseOpenEndedComponent"
																_sseCorePersistent =	"sseCorePersistentComponent"
																_sseCore =				"sseCoreComponent"
																_isManualRewardClaim =	"isManualRewardClaim"
																_sseGlobal = 			"sseGlobalComponent"))

		(var headerText:str = "isManualRewardClaim ? 'IDS_SSE_STATUS_CLAIM_AVAILABLE' : 'IDS_SSE_FINAL_REWARD'")

		(var tooltipStatus:dict = "sseTaskStatusFlags.isReceived	? {	unifiedStatus: SC.Ui_styles.UNIFIED_STATUS.CHECK,
																		text: 'IDS_TOOLTIP_REWARD_TAKEN' }
																	: null")
	)
	(style (width = 344px))

	(macro TOOLTIP_SYSTEM_DEFAULT_BACKGROUND)

	(element TOOLTIP_SYSTEM_DEFAULT_CONTAINER
		(block
			(style (width = 100%))

			(element TooltipSystemSecondaryHeaderText
				_headerText = "headerText"
				_unifiedStatus = "sseTaskStatusFlags.isReceived ? SC.Ui_styles.UNIFIED_STATUS.CHECK : SC.Ui_styles.UNIFIED_STATUS.DEFAULT"
			)
		)

		(block
			(style (width = 100%))
			(controller $Instance renderer='TooltipSystemHorizontalDivider' (bind enabled "tooltipStatus != null"))
		)

		(block
			(style (width = 100%))

			(controller $Instance renderer='TooltipSystemStatusLine'
				(bind enabled "tooltipStatus != null")
				(args
					_unifiedStatus = "tooltipStatus.unifiedStatus"
					_text = "tooltipStatus.text"
				)
			)
		)

		(element TooltipSystemHorizontalDivider)

		(block
			(style (width = 100%))

			(element TooltipSystemDHRewards
				_rewards = "rewards"
			)
		)
	)
)

(def element SseMotivatorTimeStatus (_sseId:number = 0, _isSseMotivator:bool = false)
	(scope
		(var sseEntity:dhEntity = "getEntity(_sseId)")
		(var statuses:array = "sseEntity.sseCore.statuses ?: []" (event "sseEntity.sseCore.evStatusesChanged"))
		(var statusRenderer:str = "	isIn(SC.Sse.SSE_STATUSES.LOCKED_BY_TIME, statuses) ||
									isIn(SC.Sse.SSE_STATUSES.LOCKED_BECAUSE_NOT_PRIME_TIME, statuses)	? 'SseStatusLockedByTime' :
									isIn(SC.Sse.SSE_STATUSES.REFRESH_BY_TIME_AVAILABLE, statuses)		? 'SseStatusRefreshByTime'
																										: 'SseStatusActive'")
	)
	(style (width = 100%))
	(controller $Instance
		(bind renderer "statusRenderer")
		(args
			_sseEntity = "sseEntity"
			_isSseMotivator = "_isSseMotivator"
		)
	)
)