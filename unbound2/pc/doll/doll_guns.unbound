(def constant GUN_STATE_COLORS	{	'green'		: {redOffset: -179,	greenOffset: -23,	blueOffset: -85},
									'orange'	: {redOffset: 0,	greenOffset: -102,	blueOffset: -204},
									'red'		: {redOffset: 0,	greenOffset: -189,	blueOffset: -255},
									'gray'		: {redOffset: -100,	greenOffset: -100,	blueOffset: -100},
})

(def constant NEW_GUN_ROTATOR_RADIUS 160)

(def element GunsListContainer (_shipDollRotation:number)
	(scope
		(var weapons:dhCollection = "getCollection(CC.weapon)")
	)

	(style
		(position = "absolute")
		(bind rotation "_shipDollRotation")
	)

	(controller $Repeat renderer='NewShipDollGunsList'
		(bind count "weapons.items.length")
		(args
			_collection = "weapons"
		)
	)
)


(def element NewShipDollGunsList (_collection:dhCollection)
	(scope
		(var selfVehicleWatcher:gfx = "$datahub.getFirstWatcher(CC.selfVehicle)")
		(var selfVehicleEntity:gfx = "selfVehicleWatcher.entity" (event "selfVehicleWatcher.event"))

		(macro SELF_AVATAR_ID)
		(var shipType:str = "selfVehicleEntity.avatar.shipType" (event "selfVehicleEntity.avatar.evShipTypeChanged"))
		(var isDestroyer:bool = "shipType == ShipTypes.DESTROYER")

		(var isSubmarine:bool = "selfVehicleEntity.hasComponent(CC.submarine)")

		(var weaponEntity:dhEntity = "_collection.getEntityAtIndex($index)")
		(var weaponType:number = "weaponEntity ? weaponEntity.weapon.type : SC.Ships.SHIP_WEAPON_TYPES.NONE")
		(var gunGroupsCount:number = "weaponEntity.weapon.groupsCount")
		(var isGrouped:bool = "gunGroupsCount > 0 && isSubmarine")

		(var gunEntities:dhCollection = "getCollectionByPath(CC.gun, 'byWeaponType.' + weaponType)")
		(var isEnabled:bool = "isIn(weaponType, SC.Ships.SHIP_WEAPON_TYPES.SHOW_SHIP_DOLL)")
	)

	(controller $Repeat renderer='NewGunsGroupShipDollItems' layout=false
		(bind enabled "isGrouped")
		(bind count "gunGroupsCount")
		(args "weaponType" "$index")
	)

	(block
		(controller $Repeat renderer='NewShipDollGun' layout=false
			(bind enabled "!(isGrouped)")
			(bind count "isEnabled ? gunEntities.items.length : 0")
			(args
				_weaponEntityId="weaponEntity.id"
				_gunEntityId="gunEntities.items[$index].id"
				_isDestroyer="isDestroyer"
			)
		)
	)
)

(def element NewGunsGroupShipDollItems (_weaponType:number, _groupId:number)
	(scope
		(var weaponEntity:dhEntity = "getPrimaryEntity(CC.weapon, _weaponType)")
		(var gunGroupEntity:dhEntity = "getPrimaryCompositeEntity(CC.gunsGroup, _weaponType, _groupId)")
		(var mostReadyGunId:number = "gunGroupEntity.gunsGroup.mostReadyGunId" (event "gunGroupEntity.gunsGroup.evMostReadyGunIdChanged"))
	)
	(element NewShipDollGun
		_weaponEntityId="weaponEntity.id"
		_gunEntityId="mostReadyGunId"
	)
)

(def element NewShipDollGun (_weaponEntityId:number, _gunEntityId:number, _isDestroyer:bool = false)
	(scope
		
		(var selfVehicleWatcher:gfx = "$datahub.getFirstWatcher(CC.selfVehicle)")
		(var selfVehicleEntity:gfx = "selfVehicleWatcher.entity" (event "selfVehicleWatcher.event"))
		(var weaponController:gfx = "selfVehicleEntity.weaponController" (event "selfVehicleEntity.evAdded") (event "selfVehicleEntity.evRemoved"))
		(var compassEntity:dhEntity = "getSingleEntity(CC.compass)")
		(var weaponEntity:dhEntity = "getEntity(_weaponEntityId)")
		(var gunEntity:dhEntity = "getEntity(_gunEntityId)")

		
		(var weaponType:number = "weaponEntity.weapon.type")
		(var weaponIsSelected:bool = "weaponController ? (weaponController.selectedWeapon == weaponType) : false" (event "weaponController.evSelectedWeaponChanged"))

		
		(macro SCOPE_IS_BATTLE_IN_PROGRESS "'isBattleInProgress'")

		
		(var gunX:number = "gunEntity ? (GUN_DOLL_WIDTH / (GUN_DOLL_COLS - 1) * (GUN_DOLL_COLS - 1 - gunEntity.gun.y) - 13) : 0")
		(var gunY:number = "gunEntity ? (GUN_DOLL_HEIGHT / (GUN_DOLL_ROWS - 1) * gunEntity.gun.x - 34) : 0")
		(var gunYaw:number = "gunEntity.gun.yaw" (event "gunEntity.gun.evYawChanged"))
		(var shipDollRotation:number = "compassEntity.compass.shipDollRotation ?: 0" (event "compassEntity.compass.evShipDollRotationChanged"))

		
		(var azimuth:number = "gunEntity.gunTarget ? gunEntity.gunTarget.azimuth : 0" (event "gunEntity.gunTarget.evAzimuthChanged"))
		(var offset:number = "gunEntity.gunTarget ? gunEntity.gunTarget.offset : 0" (event "gunEntity.gunTarget.evOffsetChanged"))

		
		(var angle:number = "-gradToRad(shipDollRotation) - azimuth + offset")

		(var targetX:number = "(cos(angle) * NEW_GUN_ROTATOR_RADIUS + gunY)")
		(var targetY:number = "(sin(angle) * NEW_GUN_ROTATOR_RADIUS - gunX)")
		(var gunRotation:number = "radToGrad(atan2(targetY, targetX))")

		(var state:number = "gunEntity.gun ? gunEntity.gun.state : 0" (event "gunEntity.gun.evStateChanged"))
		(var isReloading:bool = "isIn(state, [SC.Weapons.GUN_STATE.RELOAD, SC.Weapons.GUN_STATE.RELOAD_STOPPED, SC.Weapons.GUN_STATE.SWITCHING_AMMO])")

		(var cantAim:bool = "gunEntity ? gunEntity.gunTarget.invalid : false" (event "gunEntity.gunTarget.evInvalidChanged"))
		(var isAiming:bool = "gunEntity ? !(gunEntity.gunTarget.rotated) : false" (event "gunEntity.gunTarget.evRotatedChanged"))
		(var isCrit:bool = "isIn(state, [SC.Weapons.GUN_STATE.CRITICAL, SC.Weapons.GUN_STATE.SWITCHING_CRITICAL])")

		(var groupModifier:dhComponent = "gunEntity.groupModifier")
		(var positionId:number = "	groupModifier	? groupModifier.groupID + 1 :
									gunEntity		? gunEntity.gun.position
													: 0")

		(var colorDiff:dict = "	!weaponIsSelected && !isCrit								?	GUN_STATE_COLORS['gray'] :
								isCrit														?	GUN_STATE_COLORS['red'] :
								isReloading || cantAim || isAiming || !isBattleInProgress	?	GUN_STATE_COLORS['orange']
																							:	GUN_STATE_COLORS['green']")

		(var itemIcon:str = "weaponType == SC.Ships.SHIP_WEAPON_TYPES.ARTILLERY					?	_isDestroyer	?	'sec_artillery'
																													:	'artillery' :
							weaponType == SC.Ships.SHIP_WEAPON_TYPES.SECONDARY_ARTILLERY		?	'sec_artillery'
																								:	'torpedo'")
	)

	(bind alpha "(cantAim || !(weaponIsSelected) || !isBattleInProgress) && !isCrit ? 0.5 : 1")

	(style
		(position = "absolute")
		(width = "44px") (height = "44px")
		(bind rotation "gunRotation")
		(bind left "gunX")
		(bind top "gunY")
	)

	(block
		(class $FullsizeAbsolute)

		(block
			(class $FullsizeAbsolute)
			(style
				(position = "absolute")
				(width = "44px") (height = "44px")
				(pivotX = "50%")
				(pivotY = "50%")
				(bind backgroundImage "'swf:../battle_hud/doll_guns_svg/doll_guns_svg.swf:' + itemIcon")
			)
			(bind colorTransform "colorDiff")
		)

		(block
			(class $FullsizeAbsolute)

			(style
				(bind rotation "round(-gunRotation - shipDollRotation)")
			)

			(block
				(class $FullsizeAbsolute)

				(style
					(top = -50%)
					(left = -50%)
					(align = "center|middle")
				)

				(tf
					(bind class "isCrit ? '$FontColorDefault' : '$None'")
					(class $ShipDollGunText)
					(bind text "positionId")
				)
			)
		)
	)
)
